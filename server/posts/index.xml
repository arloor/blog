<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ARLOOR</title>
    <link>http://arloor.com/posts/</link>
    <description>Recent content in Posts on ARLOOR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 27 Apr 2019 17:56:22 +0800</lastBuildDate>
    
	<atom:link href="http://arloor.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二十二年•纪</title>
      <link>http://arloor.com/posts/my-life-and-my-love/</link>
      <pubDate>Sat, 27 Apr 2019 17:56:22 +0800</pubDate>
      
      <guid>http://arloor.com/posts/my-life-and-my-love/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;感谢刘港欢大学四年来1218天的陪伴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是悦悦毕业论文的致谢中的一句话。一篇论文，洋洋洒洒，突然就写到了最后的致谢，这才恍然间发现，我们也过到了大学生涯的结尾。今天4月27日，我刚满22周岁不久。20多年的生命，我从来没有好好回忆过，思考过。想了一想，总归要抖一抖胸中不多的墨水写点什么。借着这个机会，要说说我生命里遇到的那些人，那些事。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go使用sync.pool实现复用[]byte——降低IO密集应用的GC频率</title>
      <link>http://arloor.com/posts/use-sync-pool-go/</link>
      <pubDate>Sun, 14 Apr 2019 14:22:51 +0800</pubDate>
      
      <guid>http://arloor.com/posts/use-sync-pool-go/</guid>
      <description>前一篇文章介绍了sogo这个socks5代理的实现，在原始的sogo实现中，有一个重大的问题是：没有复用内存，导致频繁GC，导致cpu占用很高。对于socket通信这种io密集的应用，复用[]byte还是很重要的，不然每次去make新的[]byte，这些[]byte迟早要被GC，这就导致了cpu占用高的问题。解决这个问</description>
    </item>
    
    <item>
      <title>Sogo—使用http协议进行混淆/伪装的socks5代理</title>
      <link>http://arloor.com/posts/socks-over-http/</link>
      <pubDate>Wed, 10 Apr 2019 14:24:10 +0800</pubDate>
      
      <guid>http://arloor.com/posts/socks-over-http/</guid>
      <description>&lt;p&gt;之前写了一个http代理，用起来也是十分地舒服，但是有几个点还是有些遗憾的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http代理只能代理http协议，相比socks5代理不够通用。。&lt;/li&gt;
&lt;li&gt;netty是个好框架，但是java占用内存是真的多。。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，我又写了一个socks5代理，起名叫&lt;a href=&#34;https://github.com/arloor/sogo&#34;&gt;sogo&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;sogo本身包含sogo(client)和sogo-server。如果把sogo和sogo-server看成一个整体，一个黑盒，这个整体就是一个socks5代理。sogo(client)与本地电脑交互；sogo-server与目标网站交互；sogo(client)和sogo-server之间的交互就是http协议包裹payload进行通信。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>响应式iframe—hugo博客嵌入youtube视频</title>
      <link>http://arloor.com/posts/responsive-iframe/</link>
      <pubDate>Wed, 10 Apr 2019 01:10:48 +0800</pubDate>
      
      <guid>http://arloor.com/posts/responsive-iframe/</guid>
      <description>&lt;p&gt;其实只是博客中想嵌入16：9的youtube视频，但youtube官方的嵌入代码是固定宽度1280，高度720，在手机上表现十分不好。因此有了这个偏前端的主题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云vps关闭阿里云盾</title>
      <link>http://arloor.com/posts/linux/aliyun-turnoff-aliyundun/</link>
      <pubDate>Thu, 21 Mar 2019 16:46:54 +0800</pubDate>
      
      <guid>http://arloor.com/posts/linux/aliyun-turnoff-aliyundun/</guid>
      <description>&lt;p&gt;阿里云 ECS 默认自动安装了阿里云盾（安骑士）的 WAF 防火墙，这个云盾基本是没有用的，唯一的用处就是记录一些所谓的漏洞、扫描/注入攻击以便在阿里云后台提示用户购买使用收费版“安骑士”服务。可以说这玩意儿除了是阿里云营销“套路”调用获取数据外基本没有什么用的，摆设的感觉非常强烈。删！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RabbitMQ的使用</title>
      <link>http://arloor.com/posts/learn/rabbitmq-learn/</link>
      <pubDate>Thu, 14 Mar 2019 21:19:06 +0800</pubDate>
      
      <guid>http://arloor.com/posts/learn/rabbitmq-learn/</guid>
      <description>rabbitmq java api使用demo 详情见github项目rabbitmqdemo 在centos7上安装RabbitMQ 3.7.13 RabbitMQ是使用Erlang编写的消息中间件，因此首先需要安装Erlang，而且RabbitMQ与Erlang版本有着对应关系。 首先到RabbitMQ 3.7.13的realse页面。其中提到3.7.13版本</description>
    </item>
    
    <item>
      <title>玩转VPS与centos 7</title>
      <link>http://arloor.com/posts/linux/centos7-some-tweaks/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/linux/centos7-some-tweaks/</guid>
      <description>&lt;p&gt;多年以后，我又开始整vps了，学了三年，也知道怎么整linux了。个人使用的是搬瓦工 DC6 CN2 GIA 机房的vps。&lt;a href=&#34;https://bwh88.net/aff.php?aff=11132&amp;amp;pid=87&#34;&gt;购买链接&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对热点问题的网络舆情爬取系统</title>
      <link>http://arloor.com/posts/learn/spider-system-design/</link>
      <pubDate>Thu, 28 Feb 2019 02:05:28 +0800</pubDate>
      
      <guid>http://arloor.com/posts/learn/spider-system-design/</guid>
      <description>&lt;p&gt;“网络舆情爬取系统”是针对在一定的社会空间内，围绕中介性社会事件的发生、发展和变化，民众对社会管理者产生和持有的社会政治态度于网络上表达出来意愿集合而进行的计算机监测的系统统称。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安卓手机安装google三件套</title>
      <link>http://arloor.com/posts/other/google-service-framework-install/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/google-service-framework-install/</guid>
      <description>&lt;p&gt;之前在telegram群里有人问，怎么给安卓手机安装谷歌三件套。他说的谷歌三件套大概就是google service framework(谷歌服务框架)、google play service、google play store。这里介绍一下如何安装这三个软件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安卓Vpn开发思路</title>
      <link>http://arloor.com/posts/other/android-vpnservice-and-vpn-dev/</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/android-vpnservice-and-vpn-dev/</guid>
      <description>&lt;p&gt;经过2个月的开发，我的http代理可以说没有遗憾了，当然还有可以改进的地方，比如多用户认证啥的，但是没有必要啦。&lt;/p&gt;

&lt;p&gt;为了在安卓上也能愉快地使用自己开发的代理，研究了一下安卓Vpnservice，在此记录一下当前的进度，并确定以后的开发思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>快速安装HttpProxy</title>
      <link>http://arloor.com/posts/other/proxynew-docker-install/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/proxynew-docker-install/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/arloor/HttpProxy&#34;&gt;HttpProxy&lt;/a&gt;是一个轻量、稳定、高性能的http代理，仅仅依赖netty和日志框架，实现http中间人代理和https隧道代理。google、youtube视频、满带宽下载、作为git的代理、作为shell的代理、作为docker的代理等场景都运行完美。&lt;/p&gt;

&lt;p&gt;这一篇博客记录一下如何部署和使用这个代理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于netty的http服务器实现</title>
      <link>http://arloor.com/posts/netty/httpserver-on-netty/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/netty/httpserver-on-netty/</guid>
      <description>&lt;p&gt;现在发现自己代理的一个问题，准备将代理的http请求解析改用netty自带的一些组件，所以来研究一下netty源码中http服务器的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>java-AES加密后再Base64混淆</title>
      <link>http://arloor.com/posts/other/java-aes128-then-base64/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/java-aes128-then-base64/</guid>
      <description>&lt;p&gt;这是上一篇&lt;a href=&#34;http://arloor.com/posts/other/java-aes128/&#34;&gt;java-AES128加密-代码与一些约定&lt;/a&gt;的后续。这一篇将会记录自己看到的在AES128之后所做的混淆。混淆原来为c语言实现，自己转成了java实现。感觉这一套比较好用，所以记下来变成自己的😁咳咳，最终发现这个混淆就是对Base64的一个实现，只是将64个可打印字符的顺序弄乱了。所以我有了自定义Base64来实现混淆的代码？？？黑人问号&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>java-AES128加密-代码与一些约定</title>
      <link>http://arloor.com/posts/other/java-aes128/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/java-aes128/</guid>
      <description>&lt;p&gt;在爬虫岗位实习，免不了接触加密解密，今天的工作中踩了一些java AES128加密的坑，也学习到了一些加密的常用做法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker使用笔记</title>
      <link>http://arloor.com/posts/docker/docker-first-use/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/docker/docker-first-use/</guid>
      <description>&lt;p&gt;docker很火，所以我想入门。这篇文章是记录学习的，所以可能很乱，称为杂说&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>把ubuntu18.04 变成我的ubuntu</title>
      <link>http://arloor.com/posts/linux/turn-ubuntu-mine-own/</link>
      <pubDate>Tue, 01 Jan 2019 13:14:59 +0800</pubDate>
      
      <guid>http://arloor.com/posts/linux/turn-ubuntu-mine-own/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://arloor.com/img/new-years-day-2019-5179180558843904.3-2xa.gif&#34; alt=&#34;happy new year 2019&#34; /&gt;
拿到一个电脑的第一件事，当然是把他变成自己的电脑。装上ubuntu之后的第一件事就是变成自己的ubuntu啦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HttpProxy-基于netty的代理</title>
      <link>http://arloor.com/posts/netty/proxynew-break-the-wall-by-netty/</link>
      <pubDate>Mon, 31 Dec 2018 23:55:22 +0800</pubDate>
      
      <guid>http://arloor.com/posts/netty/proxynew-break-the-wall-by-netty/</guid>
      <description>&lt;p&gt;暑假使用java NIO实现了一个java http代理。那个http代理远远不算完善。之后学习了netty，并且使用netty实现了一个http代理，经过一个多月的使用，十分满意。今天来记录一下这里面值得写下来的东西。&lt;/p&gt;

&lt;p&gt;先放项目地址&lt;a href=&#34;https://github.com/arloor/HttpProxy&#34;&gt;HttpProxy&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>添加Ubuntu桌面图标</title>
      <link>http://arloor.com/posts/linux/ubuntu-desktop-entry-example/</link>
      <pubDate>Mon, 31 Dec 2018 23:52:22 +0800</pubDate>
      
      <guid>http://arloor.com/posts/linux/ubuntu-desktop-entry-example/</guid>
      <description>&lt;p&gt;steam.desktop的内容，可以仿照&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell关闭占用某端口的应用</title>
      <link>http://arloor.com/posts/linux/shell-close-process-that-hold-some-port/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/linux/shell-close-process-that-hold-some-port/</guid>
      <description>&lt;p&gt;现在在自己的centos7上跑了应用，有个需求：重启该应用。实现如下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Netty直接内存溢出问题解决</title>
      <link>http://arloor.com/posts/netty/netty-direct-memory-leak/</link>
      <pubDate>Mon, 10 Dec 2018 20:24:51 +0800</pubDate>
      
      <guid>http://arloor.com/posts/netty/netty-direct-memory-leak/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;自己用netty实现的代理，在测速、下载（跑满网速）的情况下总是会报OutOfDirectMemory异常。&lt;/p&gt;

&lt;h2 id=&#34;原因及解决&#34;&gt;原因及解决&lt;/h2&gt;

&lt;p&gt;在github netty项目下有这样一个&lt;a href=&#34;https://github.com/netty/netty/issues/7699&#34;&gt;issue&lt;/a&gt;。描述了这样一个问题。&lt;/p&gt;

&lt;p&gt;总结一下里面说的。出现这个异常有两种情况，pooled buf没有release；写太快，超过了极限。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Proxyme-基于javaNIO的http代理</title>
      <link>http://arloor.com/posts/netty/proxyme-based-on-javanio/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/netty/proxyme-based-on-javanio/</guid>
      <description>proxyme 一个http代理 使用java NIO的http代理。支持https。建议不要再chrome上使用本代理，因为chrome本身会请求很多谷歌的api，结果被墙住了，又只有两个线程，导致其他都被阻塞，很尴尬。 之前也打算做过这个东西，结果做出来的有点缺陷（现在想可能是selector中锁的问题，忘记了）。这大概隔了半年，这个</description>
    </item>
    
    <item>
      <title>spring cloud学习（二）</title>
      <link>http://arloor.com/posts/microservice/spring_cloud-study-two/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/microservice/spring_cloud-study-two/</guid>
      <description>&lt;p&gt;spring cloud学习（一）中已经了有了注册与发现、服务消费、负载均衡、断路器。但是这不是完整的微服务架构。&lt;/p&gt;

&lt;p&gt;在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、断路器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spring cloud学习（一）</title>
      <link>http://arloor.com/posts/microservice/spring_cloud-study-one/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/microservice/spring_cloud-study-one/</guid>
      <description>作死了解一下spring cloud。当然，不知道能了解到什么程度。先作一死。 找到了一个博客，准备照着那个博客来搞搞博客地址。这个博客的好处是原理和介绍带一些，代码、pom、配置全都在博客中可以直接复制。第二点——可以直接复制黏贴实践，第一点——复制了能让你知道复制的是干了嘛。当然，原理和介绍稍微有点少，所以哈，最好还是</description>
    </item>
    
    <item>
      <title>微服务架构是什么</title>
      <link>http://arloor.com/posts/microservice/what-is-microservice/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/microservice/what-is-microservice/</guid>
      <description>&lt;p&gt;最近总是能看得到微服务这个概念，今天来整理一下微服务的相关概念。内容源自《微服务架构与实践》王磊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opencv c&#43;&#43;学习</title>
      <link>http://arloor.com/posts/other/opencv-c&#43;&#43;-study/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/other/opencv-c&#43;&#43;-study/</guid>
      <description>终于来搞搞opencv啦。。 在windows上安装opencv，并且创建visual studio 2017项目 本来想要用clion的，但是编译源码总是出错，就直接用vs2017了。。。 安装 在opencv的release页面下载opencv3.4.1的win pack。win pack是opencv适用于vs的免编译版本。 下载好一个ex</description>
    </item>
    
    <item>
      <title>redis与springboot整合学习</title>
      <link>http://arloor.com/posts/springboot/redis%E4%B8%8Espringboot%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arloor.com/posts/springboot/redis%E4%B8%8Espringboot%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;最近在做一个电商网站。今天想要实现一下购物车的功能。&lt;/p&gt;

&lt;p&gt;考虑问题如下：用户访问购物车会比较频繁，而且经常更改（比如修改数字）。对于后端的数据来说，也就是读写都很频繁。于是考虑通过redis，来减少对数据库的读写。&lt;/p&gt;

&lt;p&gt;就研究一下怎么使用redis以及整合到springboot中。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>