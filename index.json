[{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"Golang笔记","url":"https://www.arloor.com/posts/golang/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["linux"],"title":"阿里云vps关闭阿里云盾和云监控c++插件","url":"https://www.arloor.com/posts/linux/aliyun-turnoff-aliyundun/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Grafana告警配置","url":"https://www.arloor.com/posts/grafana-alert-settings/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"Golang的string数据争用导致的panic","url":"https://www.arloor.com/posts/golang-string-data-race-panic/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows","bat"],"title":"一键关闭WeGame和LOL客户端，避免浪费时间","url":"https://www.arloor.com/posts/shutdown-wegame-lol/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Huawei手机防杀后台","url":"https://www.arloor.com/posts/huawei-phone-dianchi-youhua/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"macOS一些配置","url":"https://www.arloor.com/posts/macos-switch-cmd-option/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["rust"],"title":"Rust学习路径","url":"https://www.arloor.com/posts/rust/pick-up-rust/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows"],"title":"Windows11 WSL2使用","url":"https://www.arloor.com/posts/windows11-23h2-wsl2/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"OBS直播、录屏","url":"https://www.arloor.com/posts/obs-use/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["rust"],"title":"Rust在poll方法中使用锁","url":"https://www.arloor.com/posts/rust-use-lock-in-poll/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Homebrew安装指定版本的软件","url":"https://www.arloor.com/posts/homebrew-versioned/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["rust"],"title":"Rust reqwest代码阅读","url":"https://www.arloor.com/posts/rust-reqwest-hyper-http-client/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Afterburner配置文件备份","url":"https://www.arloor.com/posts/afterburner-profile/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows","bat"],"title":"Windows11仅以大核启动以解决部分游戏大小核心调度不佳导致帧率不稳定的问题","url":"https://www.arloor.com/posts/windows11-boot-only-pcores/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows","bat"],"title":"Windows11彻底禁止自动更新","url":"https://www.arloor.com/posts/windows11-disable-auto-update/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Debian10相关软件安装","url":"https://www.arloor.com/posts/debian10-install-software/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Expect Password","url":"https://www.arloor.com/posts/expect-password/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Linux包管理工具搜索特定文件/列出包的所有文件","url":"https://www.arloor.com/posts/linux-apt-yum-search/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Nvidia显卡风扇为什么不转？如何手动设置转速","url":"https://www.arloor.com/posts/nvidia-fan-speed-control/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"14600KF降压（123微码）以及风扇调教","url":"https://www.arloor.com/posts/14th-intel-cpu-down-voltage/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java虚拟线程","url":"https://www.arloor.com/posts/notion/java%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["ebpf","rust"],"title":"在Rust项目中集成libbpf-rs","url":"https://www.arloor.com/posts/libbpf-rust-integration/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["ebpf"],"title":"libbpf-bootstrap学习","url":"https://www.arloor.com/posts/libbpf-bootstrap-learn/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["ebpf"],"title":"libbpf overview中文翻译","url":"https://www.arloor.com/posts/libbpf-overview-cn/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java的引用类型以及WeakReference和PhantomReference在Threadlocal和DirectByteBuffer中的使用","url":"https://www.arloor.com/posts/java-weak-phantom-reference-and-usages/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"还IDEA一个整洁的滚动条高亮提示","url":"https://www.arloor.com/posts/idea-clean-scrollbar/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"我的2023总结","url":"https://www.arloor.com/posts/arloor-2023-at-github/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software","github"],"title":"使用Github Codespaces","url":"https://www.arloor.com/posts/github-codespace-use/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows"],"title":"windows11设置、性能优化","url":"https://www.arloor.com/posts/windows11-settings/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Async Profiler使用","url":"https://www.arloor.com/posts/async-profiler/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java8 Direct Bytebuffer Overflow","url":"https://www.arloor.com/posts/jdk8-socketchannel-directbytebuffer-overflow/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Grafana表格Pannel配置","url":"https://www.arloor.com/posts/grafana-new-table/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"ssh隧道","url":"https://www.arloor.com/posts/ssh-tunnel/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Springboot配置多个Mybatis的sqlSessionFactory","url":"https://www.arloor.com/posts/springboot-mybatis-multi-sql-session-factory/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"MacOS睡眠和唤醒历史","url":"https://www.arloor.com/posts/macos-sleep-wake-history/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"谷歌日本搜索结果显示日文的解决方案","url":"https://www.arloor.com/posts/jp-vps-google-settings/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"K8S持久化卷、动态置备、StorageClass","url":"https://www.arloor.com/posts/k8s-pv-pvc-dynamic-provisioning-storage-class/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"使用node-exporter + prometheus + grafana 监控k8s集群","url":"https://www.arloor.com/posts/k8s-rbac-prometheus-sd-relabel-config/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"使用K8S DaemonSet部署rust_http_proxy","url":"https://www.arloor.com/posts/k3s-daemonset-rust-http-proxy/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"在K8S集群中创建clash代理服务","url":"https://www.arloor.com/posts/k3s-create-service-of-proxy/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"K3S多云环境下的离线部署","url":"https://www.arloor.com/posts/k3s-multi-cloud-air-gap-install/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Clash Tun模式和透明代理","url":"https://www.arloor.com/posts/clash-tun-gateway/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"使用Kubeadm安装K8S 1.27.3","url":"https://www.arloor.com/posts/k8s-kubeadm/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["k8s"],"title":"K8s Kind使用","url":"https://www.arloor.com/posts/k8s-kind/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java内存监控","url":"https://www.arloor.com/posts/java-memory-monitor/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["linux"],"title":"使用Kickstart从Centos8/9自动安装RHEL9.2，并制作dd镜像","url":"https://www.arloor.com/posts/kickstart-rhel9-from-8/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software","github"],"title":"vscode","url":"https://www.arloor.com/posts/vscode/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["命运"],"title":"河西走廊：敦煌\u0026张掖","url":"https://www.arloor.com/posts/dunhuang/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Grafana文档学习","url":"https://www.arloor.com/posts/grafana-docs/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software","github"],"title":"Git常用命令","url":"https://www.arloor.com/posts/git-commands/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["notion"],"title":"链路追踪业界对标","url":"https://www.arloor.com/posts/notion/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E4%B8%9A%E7%95%8C%E5%AF%B9%E6%A0%87/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"tcpdump","url":"https://www.arloor.com/posts/tcpdump/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Openssl使用：自定义CA签发证书、私钥格式、s_client使用","url":"https://www.arloor.com/posts/openssl_ca_type_s_client/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["notion"],"title":"RPC拓扑-流量视角（二期）","url":"https://www.arloor.com/posts/notion/rpc%E6%8B%93%E6%89%91-%E6%B5%81%E9%87%8F%E8%A7%86%E8%A7%92%E4%BA%8C%E6%9C%9F/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["notion"],"title":"RPC拓扑-服务高级视角","url":"https://www.arloor.com/posts/notion/rpc%E6%8B%93%E6%89%91-%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E8%A7%86%E8%A7%92/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"trace详情搜索性能优化","url":"https://www.arloor.com/posts/notion/trace%E8%AF%A6%E6%83%85%E6%90%9C%E7%B4%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["notion"],"title":"新traceId格式","url":"https://www.arloor.com/posts/notion/%E6%96%B0traceid%E6%A0%BC%E5%BC%8F/"},{"category":null,"content":" // 用于还原性能指标 int32 samplingStrategy = 11;// 采样策略的flag，用来判断是否可以用于还原性能指标 double sampleRatio = 14; // 采样率 int64 duration_micros = 7; // 耗时，用于还原平均耗时 bool error = 8; // 状态，用于还原总失败率 其中，entry、parent_app、parent_rpc_service_name用于生成拓扑，sampleRatio、duration_micros、error用于还原性能指标（次数、耗时、错误率）。\n","subcategory":null,"summary":"","tags":["obs"],"title":"Entry级别拓扑及性能指标计算","url":"https://www.arloor.com/posts/notion/entry%E7%BA%A7%E5%88%AB%E6%8B%93%E6%89%91%E5%8F%8A%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E8%AE%A1%E7%AE%97/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"W3c Trace Context","url":"https://www.arloor.com/posts/w3c-trace-context/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"蔡司验光配镜纪实","url":"https://www.arloor.com/posts/zeiss-glasses/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["命运"],"title":"毕业后的这四年","url":"https://www.arloor.com/posts/years-after-graduation/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["命运"],"title":"千岛湖之旅","url":"https://www.arloor.com/posts/lake-with-thousands-of-island/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Clash透明代理","url":"https://www.arloor.com/posts/clash-tpproxy/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"使用Surge Mac版作为旁路由网关","url":"https://www.arloor.com/posts/mac-mini-surge-gateway/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Starship Shell","url":"https://www.arloor.com/posts/starship-shell/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"从异地多活到set化架构","url":"https://www.arloor.com/posts/set/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["program"],"title":"安卓手机安装google三件套","url":"https://www.arloor.com/posts/other/google-service-framework-install/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"威联通NAS折腾","url":"https://www.arloor.com/posts/qnap-play/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"什么是trace，分布式调用监控的本质是什么？","url":"https://www.arloor.com/posts/what-is-traceing/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"Clickhouse学习","url":"https://www.arloor.com/posts/clickhouse/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"Clickhouse存储Trace调研","url":"https://www.arloor.com/posts/clickhouse-trace/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs","java"],"title":"Opentelemetry Java自动埋点实现","url":"https://www.arloor.com/posts/opentelemetry-java-instrumention/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"Go GC初探","url":"https://www.arloor.com/posts/go-gc/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"Caddy源码阅读","url":"https://www.arloor.com/posts/caddy-code-study/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"GO PProf使用","url":"https://www.arloor.com/posts/go-pprof/"},{"category":null,"content":" 设备 启动 起点 末尾 扇区 大小 Id 类型 /dev/vda1 * 2048 411647 409600 200M 83 Linux /dev/vda2 411648 7145471 6733824 3.2G 8e Linux LVM (dd bs=512 count=[fdisk命令中最大的end数+1] if=/dev/vda | gzip -9 \u0026gt; /mnt/rhel8.img.gz \u0026amp;) ","subcategory":null,"summary":"","tags":["linux"],"title":"dd安装rhel8","url":"https://www.arloor.com/posts/rhel8-dd-install/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["tools"],"title":"Shell编程笔记","url":"https://www.arloor.com/posts/shell-tricks/"},{"category":null,"content":" addressInventoryCache.load(addressInventories); } 再细看MultiScopesAnalysisListener是如何处理ExitSpan的，并不神奇哈：\n","subcategory":null,"summary":"","tags":["obs","middleware"],"title":"Skywalking v8.9.1 源码阅读","url":"https://www.arloor.com/posts/skywalking-codes-studying/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs","middleware"],"title":"Skywalking v8.9.1文档学习","url":"https://www.arloor.com/posts/skywalking-study/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"pipeline模式的一种实现","url":"https://www.arloor.com/posts/streaming-pipeline-design/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Hyde-Hyde主题修改","url":"https://www.arloor.com/posts/modification-to-hyde-hyde/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["命运"],"title":"18岁以前的我","url":"https://www.arloor.com/posts/i-was-young/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java自定义Classloader","url":"https://www.arloor.com/posts/java-diy-classloader/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs","java"],"title":"Java Agent实现指南","url":"https://www.arloor.com/posts/java-agent/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["obs"],"title":"Opentelemetry是怎么做链路追踪的","url":"https://www.arloor.com/posts/opentelemetry-trace/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Springboot内置Tomcat的配置","url":"https://www.arloor.com/posts/springboot-tomcat-config/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"Arthas","url":"https://www.arloor.com/posts/arthas/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"一致性hash","url":"https://www.arloor.com/posts/consistent-hashing/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"领域驱动设计","url":"https://www.arloor.com/posts/what-ddd/"},{"category":null,"content":" \u0026amp;lt;distributionManagement\u0026amp;gt;\r\u0026amp;lt;snapshotRepository\u0026amp;gt;\r\u0026amp;lt;!-- snapshot仓库地址 --\u0026amp;gt;\r\u0026amp;lt;id\u0026amp;gt;oss-snapshot\u0026amp;lt;/id\u0026amp;gt;\r\u0026amp;lt;url\u0026amp;gt;https://oss.sonatype.org/content/repositories/snapshots/\u0026amp;lt;/url\u0026amp;gt;\r\u0026amp;lt;/snapshotRepository\u0026amp;gt;\r\u0026amp;lt;repository\u0026amp;gt;\r\u0026amp;lt;!-- \u0026amp;lt;!-- release仓库地址 --\u0026amp;gt; --\u0026amp;gt;\r\u0026amp;lt;id\u0026amp;gt;oss\u0026amp;lt;/id\u0026amp;gt;\r\u0026amp;lt;url\u0026amp;gt;https://oss.sonatype.org/service/local/staging/deploy/maven2\u0026amp;lt;/url\u0026amp;gt;\r\u0026amp;lt;/repository\u0026amp;gt;\r\u0026amp;lt;/distributionManagement\u0026amp;gt; 在maven的全局配置文件增加:\n","subcategory":null,"summary":"","tags":["undefined"],"title":"Maven发布到中央仓库","url":"https://www.arloor.com/posts/maven-central/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java管理扩展：通过MBean获取jvm运行情况","url":"https://www.arloor.com/posts/jmx-use/"},{"category":null,"content":" public final static Counter httpRequestsTotal = Counter.build()\r.name(\u0026amp;#34;testA\u0026amp;#34;)\r.help(\u0026amp;#34;测试\u0026amp;#34;)\r.labelNames(\u0026amp;#34;a\u0026amp;#34;, \u0026amp;#34;b\u0026amp;#34;)\r.register();\rpublic static void doCount() {\r//增加\rhttpRequestsTotal.labels(\u0026amp;#34;a\u0026amp;#34;, \u0026amp;#34;b\u0026amp;#34;).inc();\r}\r} http://someme.me:8888/metrics $ curl http://someme.me:8888/metrics # HELP testA_total 测试 # TYPE testA_total counter testA_total{a=\u0026quot;a\u0026quot;,b=\u0026quot;b\u0026quot;,} 2368.0 # HELP testA_created 测试 # TYPE testA_created gauge testA_created{a=\u0026quot;a\u0026quot;,b=\u0026quot;b\u0026quot;,} 1.61175989861E9 实际上，并不需要这么僵硬地引入这些依赖，只要返回的报文跟上面一样就行了。\n","subcategory":null,"summary":"","tags":["obs"],"title":"Prometheus Exporter","url":"https://www.arloor.com/posts/prometheus-exporter/"},{"category":null,"content":" %packages @^minimal-environment\n%end\nKeyboard layouts keyboard \u0026ndash;vckeymap=cn \u0026ndash;xlayouts='cn'\nSystem language lang zh_CN.UTF-8\nNetwork information network \u0026ndash;hostname=rhel8.localdomain\n用于非dhcp的机器，即使用静态IP的机器，相关变量需要替换 network \u0026ndash;bootproto=static \u0026ndash;ip=$IPv4 \u0026ndash;netmask=$MASK \u0026ndash;gateway=$GATE \u0026ndash;device=ens3 \u0026ndash;nameserver=223.6.6.6 \u0026ndash;ipv6=auto \u0026ndash;activate Use network installation url \u0026ndash;url=\u0026quot;http://someme.me/rhel8-install/BaseOS/\u0026quot;\nSELinux configuration selinux \u0026ndash;disabled firewall \u0026ndash;disabled\nRun the Setup Agent on first boot firstboot \u0026ndash;enable\nIntended system purpose syspurpose \u0026ndash;sla=\u0026quot;Self-Support\u0026quot;\nSystem timezone timezone Asia/Shanghai \u0026ndash;isUtc\nRoot password rootpw \u0026ndash;plaintext arloor.com services \u0026ndash;enabled=\u0026quot;chronyd\u0026quot; sshkey \u0026ndash;username=root \u0026quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZQzKHfZLlFEdaRUjfSK4twhL0y7+v23Ko4EI1nl6E1/zYqloSZCH3WqQFLGA7gnFlqSAfEHgCdD/4Ubei5a49iG0KSPajS6uPkrB/eiirTaGbe8oRKv2ib4R7ndbwdlkcTBLYFxv8ScfFQv6zBVX3ywZtRCboTxDPSmmrNGb2nhPuFFwnbOX8McQO5N4IkeMVedUlC4w5//xxSU67i1i/7kZlpJxMTXywg8nLlTuysQrJHOSQvYHG9a6TbL/tOrh/zwVFbBS+kx7X1DIRoeC0jHlVJSSwSfw6ESrH9JW71cAvn6x6XjjpGdQZJZxpnR1NTiG4Q5Mog7lCNMJjPtwJ not@home\u0026quot;\n%addon com_redhat_kdump \u0026ndash;disable \u0026ndash;reserve-mb='auto'\n%end\n%anaconda pwpolicy root \u0026ndash;minlen=6 \u0026ndash;minquality=1 \u0026ndash;notstrict \u0026ndash;nochanges \u0026ndash;notempty pwpolicy user \u0026ndash;minlen=6 \u0026ndash;minquality=1 \u0026ndash;notstrict \u0026ndash;nochanges \u0026ndash;emptyok pwpolicy luks \u0026ndash;minlen=6 \u0026ndash;minquality=1 \u0026ndash;notstrict \u0026ndash;nochanges \u0026ndash;notempty %end 6 终极放送\n","subcategory":null,"summary":"","tags":["linux"],"title":"pxeboot自动安装rhel8","url":"https://www.arloor.com/posts/redhat8-install/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"ZGC使用","url":"https://www.arloor.com/posts/zgc/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Springboot Boot Time","url":"https://www.arloor.com/posts/springboot-boot-time/"},{"category":null,"content":" [Service] WorkingDirectory=/opt/proxy EnvironmentFile=/opt/proxy/jvm_option ExecStart=/usr/bin/java $gc_option $heap_option -jar /opt/proxy/forwardproxy-1.0-jar-with-dependencies.jar -c /opt/proxy/proxy.properties LimitNOFILE=100000 Restart=always RestartSec=30\n[Install] WantedBy=multi-user.target 作用是从EnvironmentFile读取gc_option和heap_option。注意EnvironmentFile不可以不存在。经过上面的实战，我配置的参数如下：\n","subcategory":null,"summary":"","tags":["java"],"title":"Jvm调优入门","url":"https://www.arloor.com/posts/jvm-option/"},{"category":null,"content":" brew install libuv ln -fs /usr/local/include/uv.h /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/uv.h ln -fs /usr/local/include/uv /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/uv ","subcategory":null,"summary":"","tags":["undefined"],"title":"Macos安装Libuv","url":"https://www.arloor.com/posts/macos-libuv/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["middleware"],"title":"Zookeeper文档摘要","url":"https://www.arloor.com/posts/zookeeper-learn/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"ForkJoinPool使用场景","url":"https://www.arloor.com/posts/when-to-use-forkjoinpool/"},{"category":null,"content":" KafkaConsumer consumer = createKafkaConsumer( \u0026quot;bootstrap.servers\u0026quot;, \u0026quot;localhost:9092\u0026quot;, \u0026quot;group.id\u0026quot;, \u0026quot;my-group-id\u0026quot;, \u0026quot;isolation.level\u0026quot;, \u0026quot;read_committed\u0026quot;);\nconsumer.subscribe(singleton(\u0026quot;inputTopic\u0026quot;));\nproducer.initTransactions();\nwhile (true) { ConsumerRecords records = consumer.poll(Long.MAX_VALUE); // 开启事务 producer.beginTransaction(); for (ConsumerRecord record : records) producer.send(producerRecord(“outputTopic”, record)); // 如果失败，退回consumer的offset，再试一次 producer.sendOffsetsToTransaction(currentOffsets(consumer), group);\nproducer.commitTransaction(); } replication\n","subcategory":null,"summary":"","tags":["undefined"],"title":"Kafka文档摘要","url":"https://www.arloor.com/posts/kafka-learn/"},{"category":null,"content":" SELECT * FROM ref_table,other_table WHERE ref_table.key_column_part1=other_table.column AND ref_table.key_column_part2=1; SELECT * FROM ref_table,other_table WHERE ref_table.key_column=other_table.column;\nSELECT * FROM ref_table,other_table WHERE ref_table.key_column_part1=other_table.column AND ref_table.key_column_part2=1; ","subcategory":null,"summary":"","tags":["undefined"],"title":"Mysql索引及explain使用","url":"https://www.arloor.com/posts/mysql-explain/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"http2是什么","url":"https://www.arloor.com/posts/http2/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"如何正确地urlEncode？空格被urlEncode成+","url":"https://www.arloor.com/posts/how-to-urlencode/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"JsonUtil代码(基于Jackson)","url":"https://www.arloor.com/posts/other/jackson-util/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"在springboot之外使用thymeleaf渲染text","url":"https://www.arloor.com/posts/other/use-thymeleaf-to-render-text-without-springmvc/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"MacOS和windows开机自启动","url":"https://www.arloor.com/posts/other/start-onboot-windows-macos/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["middleware"],"title":"Jaeger学习","url":"https://www.arloor.com/posts/learn/jaeger/"},{"category":null,"content":" import com.dianping.cat.Cat; import com.google.common.collect.Lists; import lombok.extern.apachecommons.CommonsLog; import org.apache.http.HttpEntity; import org.apache.http.HttpEntityEnclosingRequest; import org.apache.http.HttpRequest; import org.apache.http.NoHttpResponseException; import org.apache.http.client.HttpRequestRetryHandler; import org.apache.http.client.config.CookieSpecs; import org.apache.http.client.config.RequestConfig; import org.apache.http.client.entity.UrlEncodedFormEntity; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpGet; import org.apache.http.client.methods.HttpPost; import org.apache.http.client.protocol.HttpClientContext; import org.apache.http.conn.ConnectTimeoutException; import org.apache.http.conn.socket.LayeredConnectionSocketFactory; import org.apache.http.conn.ssl.SSLConnectionSocketFactory; import org.apache.http.entity.StringEntity; import org.apache.http.impl.client.CloseableHttpClient; //import org.apache.http.impl.client.HttpClients; import com.meituan.mtrace.http.HttpClients; // 仅替换该包名 import org.apache.http.impl.conn.PoolingHttpClientConnectionManager; import org.apache.http.message.BasicNameValuePair; import org.apache.http.protocol.HTTP; import org.apache.http.util.EntityUtils;\nimport javax.net.ssl.SSLContext; import javax.net.ssl.SSLException; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; import java.io.IOException; import java.io.InputStream; import java.io.InterruptedIOException; import java.net.UnknownHostException; import java.security.KeyManagementException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import java.util.List; import java.util.Map; import java.util.Optional; import java.util.function.Consumer;\n@CommonsLog public class HttpUtil { private static CloseableHttpClient client; private static final int READ_TIMEOUT = 100;\n/**\r* 静态构造\r* 可以使用ssl\r*/\rstatic {\r// Create a trust manager that does not validate certificate chains\rTrustManager[] trustAllCerts = new TrustManager[]{\rnew X509TrustManager() {\rpublic X509Certificate[] getAcceptedIssuers() {\rreturn null;\r}\rpublic void checkClientTrusted(X509Certificate[] certs, String authType) {\r// don\u0026amp;#39;t check\r}\rpublic void checkServerTrusted(X509Certificate[] certs, String authType) {\r// don\u0026amp;#39;t check\r}\r}\r};\rSSLContext ctx = null;\rtry {\rctx = SSLContext.getInstance(\u0026amp;#34;TLS\u0026amp;#34;);\rctx.init(null, trustAllCerts, null);\r} catch (NoSuchAlgorithmException e) {\re.printStackTrace();\r} catch (KeyManagementException e) {\re.printStackTrace();\r}\rLayeredConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(ctx);\r//连接管理器，设置总连接数和到单一host的最大连接数\rPoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\rcm.setMaxTotal(50);\rcm.setDefaultMaxPerRoute(50);\r//默认请求配置，这里设置cookie策略\rRequestConfig requestConfig = RequestConfig\r.custom()\r.setCookieSpec(CookieSpecs.STANDARD)\r.setConnectionRequestTimeout(100)\r.setConnectTimeout(200) // 连接超时\r.setSocketTimeout(300) // 读超时\r.build();\r//创建httpclient\rclient = HttpClients.custom()\r.setConnectionManager(cm)\r.setRetryHandler(buildRetryHandler(3))\r.setDefaultRequestConfig(requestConfig)\r.setSSLSocketFactory(sslSocketFactory)\r.build();\r}\rprivate static HttpRequestRetryHandler buildRetryHandler(final int retryTime) {\rreturn (exception, executionCount, context) -\u0026amp;gt; {\rif (executionCount \u0026amp;gt;= retryTime) {\rreturn false;\r}\rif (exception instanceof NoHttpResponseException) {\rreturn true;\r}\rif (exception instanceof InterruptedIOException) {\rreturn true;\r}\rif (exception instanceof UnknownHostException) {\rreturn false;\r}\rif (exception instanceof ConnectTimeoutException) {\rreturn false;\r}\rif (exception instanceof SSLException) {\rreturn false;\r}\rHttpClientContext clientContext = HttpClientContext.adapt(context);\rHttpRequest request = clientContext.getRequest();\rreturn !(request instanceof HttpEntityEnclosingRequest);\r};\r}\r/**\r* 发送post请求，请求体json,默认超时时间\r*\r* @param apiUrl\r* @param param\r* @return\r*/\rpublic static String doPostJson(String apiUrl, Object param) throws IOException {\rreturn doPostJson(apiUrl, apiUrl, READ_TIMEOUT);\r}\r/**\r* 发送post请求，请求体json,超时时间\r*\r* @param apiUrl\r* @param param\r* @return\r*/\rpublic static String doPostJson(String apiUrl, Object param, int readTimeout) throws IOException {\rString json = JsonUtil.toJson(param);\rString httpStr = null;\rHttpPost httpPost = new HttpPost(apiUrl);\rCloseableHttpResponse response = null;\r//设置超时时间\rRequestConfig config = RequestConfig.custom()\r.setConnectionRequestTimeout(100)\r.setConnectTimeout(100)\r.setSocketTimeout(readTimeout)\r.build();\rhttpPost.setConfig(config);\rtry {\rStringEntity stringEntity = new StringEntity(json, \u0026amp;#34;UTF-8\u0026amp;#34;);//解决中文乱码问题\rstringEntity.setContentType(\u0026amp;#34;application/json;charset=utf-8\u0026amp;#34;);\rhttpPost.setEntity(stringEntity);\rresponse = client.execute(httpPost);\rHttpEntity entity = response.getEntity();\rhttpStr = EntityUtils.toString(entity, \u0026amp;#34;UTF-8\u0026amp;#34;);\r} catch (IOException e) {\rlog.error(\u0026amp;#34;HttpUtils post Failed!\u0026amp;#34;, e);\rthrow e;\r} finally {\rif (response != null) {\rtry {\r// 确保entity里的inputStream close\rEntityUtils.consume(response.getEntity());\r//关闭response的底层connection【必要】\rresponse.close();\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r//疑似没有必要，但框架HttpClientManager有这行\rhttpPost.releaseConnection();\r}\rreturn Optional.ofNullable(httpStr).orElseGet(String::new);\r}\rpublic static String doPostForm(String apiUrl, Map\u0026amp;lt;String, String\u0026amp;gt; params, int readTimeout) throws IOException {\rString httpStr = null;\rHttpPost httpPost = new HttpPost(apiUrl);\rCloseableHttpResponse response = null;\r//设置超时时间\rRequestConfig config = RequestConfig.custom()\r.setConnectionRequestTimeout(100)\r.setConnectTimeout(100)\r.setSocketTimeout(readTimeout)\r.build();\rhttpPost.setConfig(config);\rtry {\rList\u0026amp;lt;BasicNameValuePair\u0026amp;gt; data = Lists.newArrayList();\rparams.forEach((key, value) -\u0026amp;gt; {\rdata.add(new BasicNameValuePair(key, value));\r});\rhttpPost.setEntity(new UrlEncodedFormEntity(data, HTTP.UTF_8));\rresponse = client.execute(httpPost);\rHttpEntity entity = response.getEntity();\rhttpStr = EntityUtils.toString(entity, \u0026amp;#34;UTF-8\u0026amp;#34;);\r} catch (IOException e) {\rlog.error(\u0026amp;#34;HttpUtils post Failed!\u0026amp;#34;, e);\rthrow e;\r} finally {\rif (response != null) {\rtry {\r// 确保entity里的inputStream close\rEntityUtils.consume(response.getEntity());\r//关闭response的底层connection【必要】\rresponse.close();\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r//疑似没有必要，但框架HttpClientManager有这行\rhttpPost.releaseConnection();\r}\rreturn Optional.ofNullable(httpStr).orElseGet(String::new);\r}\rpublic static String get(String apiUrl, int readTimeout) throws IOException {\rString httpStr = null;\rHttpGet get = new HttpGet(apiUrl);\rCloseableHttpResponse response = null;\r//设置超时时间\rRequestConfig config = RequestConfig.custom()\r.setConnectionRequestTimeout(100)\r.setConnectTimeout(100)\r.setSocketTimeout(readTimeout)\r.build();\rget.setConfig(config);\rtry {\rresponse = client.execute(get);\rHttpEntity entity = response.getEntity();\rhttpStr = EntityUtils.toString(entity, \u0026amp;#34;UTF-8\u0026amp;#34;);\r} catch (IOException e) {\rlog.error(\u0026amp;#34;HttpUtils post Failed!\u0026amp;#34;, e);\rthrow e;\r} finally {\rif (response != null) {\rtry {\r// 确保entity里的inputStream close\rEntityUtils.consume(response.getEntity());\r//关闭response的底层connection【必要】\rresponse.close();\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r//疑似没有必要，但框架HttpClientManager有这行\rget.releaseConnection();\r}\rreturn Optional.ofNullable(httpStr).orElseGet(String::new);\r}\rpublic static void get(String apiUrl, int readTimeout, Consumer\u0026amp;lt;InputStream\u0026amp;gt; consumer) throws IOException {\rHttpGet get = new HttpGet(apiUrl);\rCloseableHttpResponse response = null;\r//设置超时时间\rRequestConfig config = RequestConfig.custom()\r.setConnectionRequestTimeout(100)\r.setConnectTimeout(100)\r.setSocketTimeout(readTimeout)\r.build();\rget.setConfig(config);\rtry {\rresponse = client.execute(get);\rHttpEntity entity = response.getEntity();\rtry (InputStream inputStream = entity.getContent();) {\rconsumer.accept(inputStream);\r}catch (Throwable e){\rlog.error(\u0026amp;#34;cosume inputStream失败\u0026amp;#34;,e);\r}\r} catch (IOException e) {\rlog.error(\u0026amp;#34;HttpUtils post Failed!\u0026amp;#34;, e);\rthrow e;\r} finally {\rif (response != null) {\rtry {\r// 确保entity里的inputStream close\rEntityUtils.consume(response.getEntity());\r//关闭response的底层connection【必要】\rresponse.close();\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r//疑似没有必要，但框架HttpClientManager有这行\rget.releaseConnection();\r}\r}\r} ","subcategory":null,"summary":"","tags":["undefined"],"title":"HttpUtil的一段代码","url":"https://www.arloor.com/posts/http-utils/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java wait/notify和condition","url":"https://www.arloor.com/posts/wait-notify-and-condition/"},{"category":null,"content":" case SelectStrategy.BUSY_WAIT:\r// fall-through to SELECT since the busy-wait is not supported with NIO\rcase SelectStrategy.SELECT:\rlong curDeadlineNanos = nextScheduledTaskDeadlineNanos();\rif (curDeadlineNanos == -1L) {\rcurDeadlineNanos = NONE; // nothing on the calendar\r}\rnextWakeupNanos.set(curDeadlineNanos);\rtry {\rif (!hasTasks()) {\rstrategy = select(curDeadlineNanos);\r}\r} finally {\r// This update is just to help block unnecessary selector wakeups\r// so use of lazySet is ok (no race condition)\rnextWakeupNanos.lazySet(AWAKE);\r}\r// fall through\rdefault:\r}\r} catch (IOException e) {\r// If we receive an IOException here its because the Selector is messed up. Let\u0026amp;#39;s rebuild\r// the selector and retry. https://github.com/netty/netty/issues/8566\rrebuildSelector0();\rselectCnt = 0;\rhandleLoopException(e);\rcontinue;\r}\rselectCnt++;\rcancelledKeys = 0;\rneedsToSelectAgain = false;\rfinal int ioRatio = this.ioRatio;\rboolean ranTasks;\rif (ioRatio == 100) {\rtry {\rif (strategy \u0026amp;gt; 0) {\rprocessSelectedKeys();\r}\r} finally {\r// Ensure we always run tasks.\rranTasks = runAllTasks();\r}\r} else if (strategy \u0026amp;gt; 0) {\rfinal long ioStartTime = System.nanoTime();\rtry {\rprocessSelectedKeys();\r} finally {\r// Ensure we always run tasks.\rfinal long ioTime = System.nanoTime() - ioStartTime;\rranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\r}\r} else {\rranTasks = runAllTasks(0); // This will run the minimum number of tasks\r}\rif (ranTasks || strategy \u0026amp;gt; 0) {\rif (selectCnt \u0026amp;gt; MIN_PREMATURE_SELECTOR_RETURNS \u0026amp;amp;\u0026amp;amp; logger.isDebugEnabled()) {\rlogger.debug(\u0026amp;#34;Selector.select() returned prematurely {} times in a row for Selector {}.\u0026amp;#34;,\rselectCnt - 1, selector);\r}\rselectCnt = 0;\r} else if (unexpectedSelectorWakeup(selectCnt)) { // Unexpected wakeup (unusual case)\rselectCnt = 0;\r}\r} catch (CancelledKeyException e) {\r// Harmless exception - log anyway\rif (logger.isDebugEnabled()) {\rlogger.debug(CancelledKeyException.class.getSimpleName() + \u0026amp;#34; raised by a Selector {} - JDK bug?\u0026amp;#34;,\rselector, e);\r}\r} catch (Throwable t) {\rhandleLoopException(t);\r}\r// Always handle shutdown even if the loop processing threw an exception.\rtry {\rif (isShuttingDown()) {\rcloseAll();\rif (confirmShutdown()) {\rreturn;\r}\r}\r} catch (Throwable t) {\rhandleLoopException(t);\r}\r}\r} 再看下如何处理selectedKeys的：\nAbstractChannel.this.eventLoop = eventLoop;\rif (eventLoop.inEventLoop()) {\rregister0(promise);\r} else {\rtry {\reventLoop.execute(new Runnable() {\r@Override\rpublic void run() {\rregister0(promise);\r}\r});\r} catch (Throwable t) {\rlogger.warn(\r\u0026amp;#34;Force-closing a channel whose registration task was not accepted by an event loop: {}\u0026amp;#34;,\rAbstractChannel.this, t);\rcloseForcibly();\rcloseFuture.setClosed();\rsafeSetFailure(promise, t);\r}\r}\r} 这一段代码中只要关注最后一个if-else。其语义是：\n","subcategory":null,"summary":"","tags":["netty"],"title":"从register和accept的锁竞争问题到netty的nioEventLoop设计","url":"https://www.arloor.com/posts/netty/select-register-nioeventloop/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Luence学习","url":"https://www.arloor.com/posts/luence-learn/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["elasticsearch"],"title":"开发Elasticsearch自定义评分插件-horspool评分","url":"https://www.arloor.com/posts/elasticsearch-horspool-score-plugin/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows"],"title":"Windows Terminal","url":"https://www.arloor.com/posts/windows-terminal/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"acme.sh签发dnspod(腾讯云)和阿里云ssl野卡证书并自动续签","url":"https://www.arloor.com/posts/acme-wildcard-ssl-cert/"},{"category":null,"content":" compileOnly project(':libs:plugin-classloader') compile project(':libs:plugin-classloader') testRuntime project(':libs:plugin-classloader')\n// lucene 设置maven仓库为阿里云镜像\nPUT /index/_doc/1 { \u0026quot;field\u0026quot;: \u0026quot;foo bar foo\u0026quot; }\nPUT /index/_doc/2 { \u0026quot;field\u0026quot;: \u0026quot;bar baz\u0026quot; }\nPOST /index/_refresh\nGET /index/_search?explain=true { \u0026quot;query\u0026quot;: { \u0026quot;query_string\u0026quot;: { \u0026quot;query\u0026quot;: \u0026quot;foo^1.7\u0026quot;, \u0026quot;default_field\u0026quot;: \u0026quot;field\u0026quot; } } } 注意：\nPUT /index/_settings { \u0026quot;index\u0026quot;: { \u0026quot;similarity\u0026quot;: { \u0026quot;default\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot; } } } }\nPOST /index/_open es插件模块\npublic Node(Environment environment,Collection\u0026lt;Class\u0026lt;? extends Plugin\u0026gt;\u0026gt; classpathPlugins) { this(environment, classpathPlugins, true);\r} + /** Constructs a node 然后，修改BootStrap中的Node创建代码\n","subcategory":null,"summary":"","tags":["elasticsearch"],"title":"Elasticsearch调研","url":"https://www.arloor.com/posts/elasticsearch-study/"},{"category":null,"content":" For convenience, consider putting a HttpServerCodec before the HttpObjectAggregator as it functions as both a HttpRequestDecoder and a HttpResponseEncoder. 看到这些，觉得我的HttpProxy可以重写了，站在netty的头上（之前在肩膀上），直接利用HttpCodec来解析请求、编码相应，netty Yes！\nboolean keepAlive = HttpUtil.isKeepAlive(req); //这里面的逻辑是http1.0需要显示connection：keepAlive,http1.1默认keepALive除非connection:close\rFullHttpResponse response = new DefaultFullHttpResponse(req.protocolVersion(), OK,\rUnpooled.wrappedBuffer(CONTENT));\rresponse.headers()\r.set(CONTENT_TYPE, TEXT_PLAIN)\r.setInt(CONTENT_LENGTH, response.content().readableBytes());\rif (keepAlive) {\rif (!req.protocolVersion().isKeepAliveDefault()) {\rresponse.headers().set(CONNECTION, KEEP_ALIVE);\r}\r} else {\r// Tell the client we\u0026amp;#39;re going to close the connection.\rresponse.headers().set(CONNECTION, CLOSE);\r}\rChannelFuture f = ctx.write(response);\rif (!keepAlive) {//如果不是长连接，写完成就Close Socket\rf.addListener(ChannelFutureListener.CLOSE);\r}\r}\r} ","subcategory":null,"summary":"","tags":["netty"],"title":"Netty源码阅读","url":"https://www.arloor.com/posts/netty-src-read/"},{"category":null,"content":" Please enter phone number: 可以看到已经进入输入电话号码进行登录的阶段了。\n##自行安装jdk8\n并确定JAVA_HOME，我的是/usr/java/jdk1.8.0_131 所以下文cmake我添加了-DJAVA_HOME=/usr/java/jdk1.8.0_131/ rm -rf td git clone https://github.com/tdlib/td.git cd td git checkout v1.6.0 rm -rf build mkdir build cd build export CXXFLAGS=\u0026quot;\u0026quot; cmake -DCMAKE_BUILD_TYPE=Release -DJAVA_HOME=/usr/java/jdk1.8.0_131/ -DCMAKE_INSTALL_PREFIX:PATH=../example/java/td -DTD_ENABLE_JNI=ON .. cmake \u0026ndash;build . \u0026ndash;target install cd .. cd example/java rm -rf build mkdir build cd build cmake -DCMAKE_BUILD_TYPE=Release -DJAVA_HOME=/usr/java/jdk1.8.0_131/ -DCMAKE_INSTALL_PREFIX:PATH=/usr/local -DTd_DIR:PATH=$(readlink -e ../td/lib/cmake/Td) .. cmake \u0026ndash;build . \u0026ndash;target install cd ../../.. cd .. ls -l /usr/local 看到以下，则说明编译成功，libtdjni.so在/usr/local/bin/libtdjni.so\n","subcategory":null,"summary":"","tags":["undefined"],"title":"Telegram java客户端","url":"https://www.arloor.com/posts/tdlib-java-telegram-client/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Kafka Use","url":"https://www.arloor.com/posts/kafka-use/"},{"category":null,"content":" 增加如下： security: authorization: \u0026quot;enabled\u0026quot; 启动mongod\n","subcategory":null,"summary":"","tags":["undefined"],"title":"Centos8安装MongoDB 4.2","url":"https://www.arloor.com/posts/mongodb/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Java异步任务中Future的实现","url":"https://www.arloor.com/posts/java-future/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software"],"title":"nftables设置nat转发(基于centos8)","url":"https://www.arloor.com/posts/centos8-nftables-nat/"},{"category":null,"content":" { \u0026quot;settings\u0026quot;: { \u0026quot;number_of_shards\u0026quot;: 1, \u0026quot;number_of_replicas\u0026quot;: 0 }, \u0026quot;mappings\u0026quot;: { \u0026quot;user\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; } } } } } ","subcategory":null,"summary":"","tags":["elasticsearch"],"title":"Elasticsearch简单入门","url":"https://www.arloor.com/posts/elasticsearch-install/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"2020年顾后顾前","url":"https://www.arloor.com/posts/other/2020/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"华为手机关闭系统更新","url":"https://www.arloor.com/posts/huawei-turnoff-upgrade/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Spring随用随记","url":"https://www.arloor.com/posts/spring-use-notes/"},{"category":null,"content":" @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface DistLock {\npublic String lockPrefix() default \u0026amp;#34;\u0026amp;#34;;\rpublic int lockTime() default 10;\r} import org.apache.commons.lang3.StringUtils; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.aspectj.lang.reflect.MethodSignature; import org.springframework.core.annotation.Order; import org.springframework.stereotype.Component;\nimport javax.annotation.Resource; import java.lang.annotation.Annotation; import java.lang.reflect.Method;\n@Aspect @Component @Order(10) public class DistLockAspect {\n@Resource(name = \u0026amp;#34;redisHaCache\u0026amp;#34;)\rprivate RedisHaCache redisHaCache;\r@Pointcut(\u0026amp;#34;@annotation(com.cmbchina.ccd.pluto.fulltextmanager.aop.lock.DistLock)\u0026amp;#34;)\rpublic void pointCut(){}\r@Around(\u0026amp;#34;pointCut()\u0026amp;#34;)\rpublic Object aroundMethod(ProceedingJoinPoint jp) throws Throwable {\rMethodSignature signature = (MethodSignature) jp.getSignature();\rMethod method = signature.getMethod();\rDistLock distLock = method.getAnnotation(DistLock.class);\rif (distLock == null) {\rreturn jp.proceed();\r}\rAnnotation[][] parameterAnnotations = method.getParameterAnnotations();\rObject distLockObj = null;\rObject lockObjAnnotation = null;\rint index = -1;\rfor (int i = 0; i \u0026amp;lt; parameterAnnotations.length; i++) {\rfor (int j = 0; j \u0026amp;lt; parameterAnnotations[i].length; j++) {\rif (parameterAnnotations[i][j] instanceof DistLockObject) {\rlockObjAnnotation = parameterAnnotations[i][j];\rindex = i;\rbreak;\r}\r}\rif (index != -1) {\rbreak;\r}\r}\rif (index != -1) {\rdistLockObj = jp.getArgs()[index];\r}\rString key = distLock.lockPrefix();\rif (distLockObj != null \u0026amp;amp;\u0026amp;amp; lockObjAnnotation != null) {\rString lockField = ((DistLockObject) lockObjAnnotation).objectLockField();\rif (!StringUtils.isEmpty(lockField)) {\rString methodName = \u0026amp;#34;get\u0026amp;#34; + StringUtils.capitalize(lockField);\rMethod getObjMethod = distLockObj.getClass().getMethod(methodName);\rObject invoke = getObjMethod.invoke(distLockObj);\rif (invoke != null) {\rkey += invoke.toString();\r}\r} else {\rkey += distLockObj.toString();\r}\r}\rif (!\u0026amp;#34;OK\u0026amp;#34;.equals(redisHaCache.set(key, key, \u0026amp;#34;NX\u0026amp;#34;, \u0026amp;#34;EX\u0026amp;#34;, distLock.lockTime()))) {\rthrow new FullTextException(\u0026amp;#34;This object is already locked!\u0026amp;#34;);\r}\rtry {\rreturn jp.proceed();\r} finally {\rredisHaCache.del(key);\r}\r}\r} @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) public @interface DistLockObject {\npublic String objectLockField() default \u0026amp;#34;\u0026amp;#34;;\r} @DistLock(lockPrefix = DIST_LOCK_WORK_SPACE_OBJECT) public int create(@DistLockObject(objectLockField = \u0026quot;objectId\u0026quot;) WorkSpaceCreateVo workSpaceCreateVo) { 其他声明PointCut的方式\n","subcategory":null,"summary":"","tags":["undefined"],"title":"Spring Aop使用","url":"https://www.arloor.com/posts/spring-aop/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["java"],"title":"Jdk8的function包以及::用法","url":"https://www.arloor.com/posts/jdk8-function/"},{"category":null,"content":" Recommended minimum configuration: Example rule allowing access from your local networks. Adapt to list your (internal) IP networks from where browsing should be allowed acl localnet src 0.0.0.1-0.255.255.255\t# RFC 1122 \u0026quot;this\u0026quot; network (LAN) acl localnet src 10.0.0.0/8\t# RFC 1918 local private network (LAN) acl localnet src 100.64.0.0/10\t# RFC 6598 shared address space (CGN) acl localnet src 169.254.0.0/16 # RFC 3927 link-local (directly plugged) machines acl localnet src 172.16.0.0/12\t# RFC 1918 local private network (LAN) acl localnet src 192.168.0.0/16\t# RFC 1918 local private network (LAN) acl localnet src fc00::/7 # RFC 4193 local private network range acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machines\n所有网段 acl allnet src all\nacl SSL_ports port 443 acl Safe_ports port 80\t# http acl Safe_ports port 21\t# ftp acl Safe_ports port 443\t# https acl Safe_ports port 70\t# gopher acl Safe_ports port 210\t# wais acl Safe_ports port 1025-65535\t# unregistered ports acl Safe_ports port 280\t# http-mgmt acl Safe_ports port 488\t# gss-http acl Safe_ports port 591\t# filemaker acl Safe_ports port 777\t# multiling http acl CONNECT method CONNECT\n只允许arloor用户 acl arloor proxy_auth REQUIRED http_access deny !arloor\nRecommended minimum Access Permission configuration: Deny requests to certain unsafe ports http_access deny !Safe_ports\nDeny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports\nOnly allow cachemgr access from localhost http_access allow localhost manager http_access deny manager\nWe strongly recommend the following be uncommented to protect innocent web applications running on the proxy server who think the only one who can access services on \u0026quot;localhost\u0026quot; is a local user #http_access deny to_localhost\nINSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS Example rule allowing access from your local networks. Adapt localnet in the ACL section to list your (internal) IP networks from where browsing should be allowed http_access allow localnet http_access allow localhost\n允许所有网段 http_access allow allnet\nAnd finally deny all other access to this proxy http_access deny all\nSquid normally listens to port 3128 http_port 20000\nUncomment and adjust the following to add a disk cache directory. #cache_dir ufs /var/spool/squid 100 16 256\nLeave coredumps in the first cache dir coredump_dir /var/spool/squid\nAdd any of your own refresh_pattern entries above these. refresh_pattern ^ftp:\t1440\t20%\t10080 refresh_pattern ^gopher:\t1440\t0%\t1440 refresh_pattern -i (/cgi-bin/|?) 0\t0%\t0 refresh_pattern .\t0\t20%\t4320\n#高匿 forwarded_for delete via off follow_x_forwarded_for deny all request_header_access From deny all request_header_access Server deny all request_header_access WWW-Authenticate deny all request_header_access Link deny all request_header_access Cache-Control deny all request_header_access Proxy-Connection deny all request_header_access X-Cache deny all request_header_access X-Cache-Lookup deny all request_header_access Via deny all request_header_access X-Forwarded-For deny all request_header_access Pragma deny all request_header_access Keep-Alive deny all 这样git就可以使用这个代理了。\n在http_access部分 http_access deny !github 这样squid仅仅允许访问github.com了。\nFsIOpJ6xvLoxxxxxxxxxxxBiDzDMhFwmL-Go\nBefore continuing, verify the record is deployed.\n然后相关证书就在 /etc/letsencrypt/live/example.com\nset -eu\nversion=4.14 wget https://github.com/rofl0r/proxychains-ng/archive/v$version.tar.gz tar xf v$version.tar.gz\n(cd proxychains-ng-$version ./configure make make install [[ -f /etc/proxychains.conf ]] || cp src/proxychains.conf /etc/proxychains.conf )\nrm -rf v$version.tar.gz proxychains-ng-$version iperf使用\n","subcategory":null,"summary":"","tags":["linux"],"title":"玩转Centos8","url":"https://www.arloor.com/posts/linux/play-with-centos8/"},{"category":null,"content":" cat \u0026gt;\u0026gt; /boot/grub2/grub.cfg \u0026lt;\u0026lt;\\EOF menuentry 'centos8-iso-boot' \u0026ndash;unrestricted { loopback loop0 (hd0,msdos1)/boot/boot.iso linux (loop0)/isolinux/vmlinuz inst.repo=hd:/dev/vda1:/boot/boot.iso inst.lang=zh_CN initrd (loop0)/isolinux/initrd.img } EOF 设置本地stage2\ncat \u0026gt;\u0026gt; /boot/grub2/grub.cfg \u0026lt;\u0026lt;\\EOF menuentry 'Memdisk-centos6.10' { # 从其他menuentry抄 linux16 /boot/memdisk raw iso initrd16 /boot/boot.iso echo 'Booting ISO \u0026hellip;' } EOF 安装后的设置\n","subcategory":null,"summary":"","tags":["linux"],"title":"从Centos7网络安装Centos8","url":"https://www.arloor.com/posts/linux/netinstall-centos8/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["redis"],"title":"Redis Cluster实现","url":"https://www.arloor.com/posts/redis/redis-cluster/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["redis"],"title":"Redis哨兵实现-sentinel.c","url":"https://www.arloor.com/posts/redis/sentinel/"},{"category":null,"content":" 如果命令为EXPIRE/PEXPIRE/EXPIREAT{\r翻译为PEXPIREAT，然后追加\r}\r如果命令为SETEX/PSETEX{\r翻译为SET+PEXPIREAT两条命令，然后追加\r}\r如果命令为SET [EX seconds][PX milliseconds]{\r翻译为SET+PEXPIREAT两条命令，然后追加\r}\r其他情况{\r直接追加命令\r}\r} feedAppendOnlyFile并不直接将命令追加到aof文件，而是追加到server.aof_buf这个缓存，之后再通过其他途径写入磁盘。如果有后台rewriting正在执行，则同时将这些命令写入aofRewrite缓冲区（aof_rewrite_buf_blocks）。\n","subcategory":null,"summary":"","tags":["redis"],"title":"Redis持久化机制-aof.c与rdb.c","url":"https://www.arloor.com/posts/redis/redis-persistence/"},{"category":null,"content":" Now quitting. 说明\n#define DEFAULT_PORT 7000 #define DEFAULT_BACKLOG 128\nuv_loop_t *loop; struct sockaddr_in addr; const char *ENTER = \u0026quot;请输入任意文字：\\n\u0026quot;; const char *echo = \u0026quot;ECHO: \u0026quot;;\ntypedef struct { uv_write_t req; uv_buf_t buf; } write_req_t;\nvoid free_write_req(uv_write_t *req) { write_req_t *wr = (write_req_t *) req; free(wr-\u0026gt;buf.base); free(wr); }\nvoid alloc_buffer(uv_handle_t *handle, size_t suggested_size, uv_buf_t *buf) { buf-\u0026gt;base = (char *) malloc(suggested_size); buf-\u0026gt;len = suggested_size; }\nvoid echo_write(uv_write_t *req, int status) { if (status) { fprintf(stderr, \u0026quot;Write error %s\\n\u0026quot;, uv_strerror(status)); } free_write_req(req); }\nvoid first_write(uv_write_t *req, int status) { if (status) { fprintf(stderr, \u0026quot;Write error %s\\n\u0026quot;, uv_strerror(status)); } else { fprintf(stderr, \u0026quot;提示发送成功\\n\u0026quot;); }\nwrite_req_t *wr = (write_req_t *) req;\rfree(wr);\r}\nvoid echo_read(uv_stream_t *client, ssize_t nread, const uv_buf_t *buf) {\nif (nread \u0026amp;gt; 0) {\r//截取char*，增加\\0，仅仅是为了打印的时候不多打，如果用于业务不要加这个，这是数组越界\rbuf-\u0026amp;gt;base[nread] = 0;\rfprintf(stderr, \u0026amp;#34;%ld:%s\u0026amp;#34;, nread, buf-\u0026amp;gt;base);\r// 创建写buf，增加ECHO提示\rint length = strlen(echo) + nread;\rchar *buff = (char *) calloc(length, sizeof(char));\rint i;\rfor (i = 0; i \u0026amp;lt; strlen(echo); i++) {\rbuff[i] = echo[i];\r}\rfor (int j = 0; j \u0026amp;lt;nread ; ++j) {\rbuff[j+i]=buf-\u0026amp;gt;base[j];\r}\r// 释放读到的buf\rfree(buf-\u0026amp;gt;base);\rwrite_req_t *req = (write_req_t *) malloc(sizeof(write_req_t));\rreq-\u0026amp;gt;buf = uv_buf_init(buff, length);// 写的buff需要在写回调中才能free，否则报错\ruv_write((uv_write_t *) req, client, \u0026amp;amp;req-\u0026amp;gt;buf, 1, echo_write);\rreturn;\r}\rif (nread \u0026amp;lt; 0) {\rif (nread != UV_EOF)\rfprintf(stderr, \u0026amp;#34;Read error %s\\n\u0026amp;#34;, uv_err_name(nread));\ruv_close((uv_handle_t *) client, NULL);\r}\rfree(buf-\u0026amp;gt;base);\r}\nvoid on_new_connection(uv_stream_t *server, int status) { if (status \u0026lt; 0) { fprintf(stderr, \u0026quot;New connection error %s\\n\u0026quot;, uv_strerror(status)); // error! return; }\nuv_tcp_t *client = (uv_tcp_t *) malloc(sizeof(uv_tcp_t));\ruv_tcp_init(loop, client);\rif (uv_accept(server, (uv_stream_t *) client) == 0) {\r//发送提示信息\rwrite_req_t *req = (write_req_t *) malloc(sizeof(write_req_t));\rreq-\u0026amp;gt;buf = uv_buf_init((char *) ENTER, strlen(ENTER));\ruv_write((uv_write_t *) req, (uv_stream_t *) client, \u0026amp;amp;req-\u0026amp;gt;buf, 1, first_write);\ruv_read_start((uv_stream_t *) client, alloc_buffer, echo_read);\r} else {\ruv_close((uv_handle_t *) client, NULL);\r}\r}\nint main() { loop = uv_default_loop();\nuv_tcp_t server;\ruv_tcp_init(loop, \u0026amp;amp;server);\ruv_ip4_addr(\u0026amp;#34;0.0.0.0\u0026amp;#34;, DEFAULT_PORT, \u0026amp;amp;addr);\ruv_tcp_bind(\u0026amp;amp;server, (const struct sockaddr *) \u0026amp;amp;addr, 0);\rfprintf(stderr, \u0026amp;#34;开始监听%d，请新开命令行输入：nc localhost %d\\n\u0026amp;#34;, DEFAULT_PORT, DEFAULT_PORT);\rint r = uv_listen((uv_stream_t *) \u0026amp;amp;server, DEFAULT_BACKLOG, on_new_connection);\rif (r) {\rfprintf(stderr, \u0026amp;#34;Listen error %s\\n\u0026amp;#34;, uv_strerror(r));\rreturn 1;\r}\rreturn uv_run(loop, UV_RUN_DEFAULT);\r} nc localhost 7000\n输入一些东西 echo 你输入的东西 ","subcategory":null,"summary":"","tags":["undefined"],"title":"Libuv教程","url":"https://www.arloor.com/posts/libuv-install/"},{"category":null,"content":" 30422:M 04 Aug 14:33:48.505 * Slave xxxxx:10005 asks for synchronization 30422:M 04 Aug 14:33:48.506 * Partial resynchronization request from xxx:10005 accepted. Sending 0 bytes of backlog starting from offset 6448313. redis2.8的部分同步机制，有效解决了网络环境不稳定、redis执行高时间复杂度的命令引起的复制中断，从而导致全量同步。但在应对slave重启和Master故障切换的场景时，psync1还是需进行全量同步。\n","subcategory":null,"summary":"","tags":["redis"],"title":"Psync2——redis备份机制的发展【转载】","url":"https://www.arloor.com/posts/redis/psync2/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["redis"],"title":"实现redis运行时加载rdb文件","url":"https://www.arloor.com/posts/redis/redis-online-load-rdb/"},{"category":null,"content":" *1 $4 PING *1 $4 PING *2 $6 SELECT $1 0 *3 $3 set $7 {a}test $3 vvv 这次实验的runid和offset都为有效值，表示一次从offset开始的增量同步。\n","subcategory":null,"summary":"","tags":["redis"],"title":"Redis异步拷贝实现—replicate.c","url":"https://www.arloor.com/posts/redis/use-redis-replicate-to-do-remote-sync/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["redis"],"title":"Redis文档摘要","url":"https://www.arloor.com/posts/redis/redis-document/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software","linux"],"title":"Nginx安装使用：webserver及反向代理","url":"https://www.arloor.com/posts/linux/nginx-install-and-reverse-proxy/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["redis"],"title":"Redis集群slot迁移","url":"https://www.arloor.com/posts/redis/redis-slot-transpot/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Socks5代理netty重制版","url":"https://www.arloor.com/posts/socks5-proxy/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["windows"],"title":"Windows10电源管理-睡眠问题解决","url":"https://www.arloor.com/posts/windows-powercfg/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["software","linux"],"title":"Centos7安装ss5、squid","url":"https://www.arloor.com/posts/linux/install-ss5-squid/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["linux"],"title":"Systemd服务文件编写-centos7下","url":"https://www.arloor.com/posts/linux/systemd/"},{"category":null,"content":" Disk /dev/sda: 10.7 GB, 10737418240 bytes, 20971520 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000929da\nDevice Boot Start End Blocks Id System /dev/sda1 * 2048 821247 409600 83 Linux /dev/sda2 821248 20969087 10073920 83 Linux 从这里可以看到，我们的目标磁盘/dev/sda(往往是一块固态)，所使用的最后一个扇区的扇区号是 20969087。记住这个数字，等会需要使用\n","subcategory":null,"summary":"","tags":["linux"],"title":"Centos7备份/恢复与网卡配置","url":"https://www.arloor.com/posts/linux/dd-backup/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["命运"],"title":"二十二年•纪","url":"https://www.arloor.com/posts/my-life-and-my-love/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["netty"],"title":"Netty实现自定义流式解析器","url":"https://www.arloor.com/posts/netty/netty-bytetomessagedecoder-stream-like-decoder/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["golang"],"title":"go使用sync.pool实现复用[]byte——降低IO密集应用的GC频率","url":"https://www.arloor.com/posts/use-sync-pool-go/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"Sogo—使用http协议进行混淆/伪装的socks5代理","url":"https://www.arloor.com/posts/socks-over-http/"},{"category":null,"content":" 或\n这样，图片的宽度，取得就是 min(850px,100%)了。850px这个值可以自行调整，找到在电脑显示器上合适的宽度\n","subcategory":null,"summary":"","tags":["undefined"],"title":"响应式iframe 16:9—hugo博客嵌入youtube视频","url":"https://www.arloor.com/posts/responsive-embedded-iframe-hugo-youtueb-vedio/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["middleware"],"title":"RabbitMQ的使用","url":"https://www.arloor.com/posts/learn/rabbitmq-learn/"},{"category":null,"content":" docker run -e PASSWORD=$passwd -p $port:8388 -p $port:8388/udp -d \u0026ndash;name ss \u0026ndash;restart always shadowsocks/shadowsocks-libev ip=wget -qO- http://whatismyip.akamai.com echo \u0026quot;配置信息: 服务器地址：$ip 端口：$port 密码：$passwd 加密协议：aes-256-gcm\u0026quot; 这样就以aes-256-gcm运行了ss-libev。详细参数见：docker镜像README\n","subcategory":null,"summary":"","tags":["linux"],"title":"玩转VPS与centos 7","url":"https://www.arloor.com/posts/linux/centos7-some-tweaks/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["undefined"],"title":"针对热点问题的网络舆情爬取系统","url":"https://www.arloor.com/posts/learn/spider-system-design/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["program"],"title":"安卓Vpn开发思路","url":"https://www.arloor.com/posts/other/android-vpnservice-and-vpn-dev/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["program"],"title":"快速安装HttpProxy","url":"https://www.arloor.com/posts/other/proxynew-docker-install/"},{"category":null,"content":" import static java.nio.charset.StandardCharsets.UTF_8;\npublic class Main { public static void main(String[] args) throws UnsupportedEncodingException, AES128.KeyLengthException { String source=\u0026quot;刘港欢\u0026quot;; System.out.println(\u0026quot;加密前字符串为：\u0026quot;+source); System.out.println(\u0026quot;===================================\u0026quot;); //集成SHA256、AES128和confusion String key=\u0026quot;我的密钥\u0026quot;; byte[] afterAESEncrypt=AES128.encrypt(source.getBytes(UTF_8),key); byte[] afterConfusion=AES128.confusion(afterAESEncrypt); String encodeStr=new String(afterConfusion,UTF_8); System.out.println(\u0026quot;加密最终结果; \u0026quot;+encyuyan byte[] afterDisConfusion= AES128.disConyuyanfterConfusion); byte[] afterAESDescrypt=AES128.decrypt(yuyanConfusion,key); String decodeStr=new String(afterAESDesyuyanF_8); System.out.println(\u0026quot;解密之后：\u0026quot;+decodeSyuyan System.out.println(\u0026quot;与加密前结果相同？\u0026quot;yuyantr.equals(source)); System.out.println(\u0026quot;===================yuyan========\u0026quot;); //只使用confusion byte[] afterConfusion1=AES128.confusion(source.getBytes(UTF_8)); String encodeStr1=new String(afterConfusion1,UTF_8); System.out.println(\u0026quot;混淆最终结果: \u0026quot;+encodeStr1); byte[] afterDisConfusion1= AES128.disConfusion(afterConfusion1); String decodeStr1=new String(afterDisConfusion1,UTF_8); System.out.println(\u0026quot;解混淆后：\u0026quot;+decodeStr1); System.out.println(\u0026quot;与混淆前结果相同？\u0026quot;+decodeStr1.equals(source)); } }\n##############控制台################ 加密前字符串为：刘港欢 加密最终结果; ChCH4-%t-EYDsM09MG\u0026lt;o{sJJ 解密之后：刘港欢 与加密前结果相同？true 混淆最终结果: IgI0gY~u[g 解混淆后：刘港欢 与混淆前结果相同？true 以上展示了使用AES+confusion、单独使用confusion两种例子。所以也可以不使用AES，直接使用这个confusion作为加密方式。可以看到一点，经过confusion运算之后的所有字节都是可以打印的，不会出现乱码的情况。\nchar *confusion(const char *str); char *disConfusion(const char *str);\nint main() { const char * source=\u0026quot;刘港欢觉得c语言好难啊！\u0026quot;; printf(\u0026quot;原字符串：%s\\n\u0026quot;,source);yuyan\nconst char * afterConfusion=confyuyan;\rprintf(\u0026amp;#34;混淆后：%s\\n\u0026amp;#34;,afterConfuyuyan\rchar *result = disConfusion(afteyuyan\rprintf(\u0026amp;#34;解混淆后：%s\u0026amp;#34;, result);\r}\nchar *confusion(const char *str) { int v13 = strlen(str); //a2 const void *ebbytes = str; //a1 char *v11; v11 = (char *) malloc(4 * ((v13 + 2) / 3)); for (int i = 0; i \u0026lt; v13; i += 3) { int v9 = 0; for (int j = i; j \u0026lt; i + 3; ++j) { v9 \u0026lt;\u0026lt;= 8; if (j \u0026lt; v13) v9 |= *(Byte * )(ebbytes + j); //一号坑：对应的java代码是：v9 |= ebbytes[j]\u0026amp;0xFF; 这是c语言byte转java int的方法：\u0026amp;0xFF } char *v12 = \u0026quot;Pz#`(:7F-a%diHm\u0026lt;kQDTVEKXI68loAqwsGgC42!R^ju0h@xYc][}S9B{M~+t$.\u0026gt;,J\u0026quot;;\nchar *v3;\rv3 = \u0026amp;amp;v11[4 * (i / 3)];\r*v3 = *(Byte *) (v12 + ((v9 \u0026amp;gt;\u0026amp;gt; 18) \u0026amp;amp; 0x3F)); //char字节0\rByte *v4;\rv4 = v3 + 1; //char字节1\r*v4 = *(Byte *) (v12 + ((v9 \u0026amp;gt;\u0026amp;gt; 12) \u0026amp;amp; 0x3F));\rchar v7;\rif (i + 1 \u0026amp;gt;= v13)\rv7 = *(Byte *) (v12 + 64);\relse\rv7 = *(Byte *) (v12 + ((v9 \u0026amp;gt;\u0026amp;gt; 6) \u0026amp;amp; 0x3F));\rv4[1] = v7; //char字节2\rchar v6;\rif (i + 2 \u0026amp;gt;= v13)\rv6 = *(Byte *) (v12 + 64);\relse\rv6 = *(Byte *) (v12 + (v9 \u0026amp;amp; 0x3F));\rv4[2] = v6; //char字节3\r}\rreturn v11;\r}\nchar *disConfusion(const char *str) { size_t *a1 = (size_t *) malloc(sizeof(size_t)); int i; char *v6; char *v7; char *v8; char *v9; char v10; char v11; char v12; char *v13; int v14; char *v15 = \u0026quot;Pz#`(:7F-a%diHm\u0026lt;kQDTVEKXI68loAqwsGgC42!R^ju0h@xYc][}S9B{M~+t$.\u0026gt;,J\u0026quot;; const char *v16 = str; size_t *v17 = a1; int a3 = strlen(str); v14 = (signed int) a3 / 4; *a1 = 3 * ((signed int) a3 / 4); v13 = malloc(*a1); for (i = 0; i \u0026lt; v14; ++i) { v6 = strchr(v15, *(char *) (v16 + 4 * i)); if (!v6) { free(v13); *v17 = 0; return 0; } v12 = 4 * ((Byte) v6 - (Byte) v15); //二号坑：这是指针减法，实际也就是indexOf，见java实现。一开始我把他当成值的减法。。。坑！ v7 = strchr(v15, *(char *) (v16 + 4 * i + 1)); if (!v7) { free(v13); *v17 = 0LL; return 0LL; } v11 = (Byte) v7 - (Byte) v15; *((Byte *) v13 + 3 * i) = v12 + (((v7 - v15) \u0026amp; 0x30) \u0026gt;\u0026gt; 4); v8 = strchr(v15, *(char *) (v16 + 4 * i + 2)); if (!v8) { free(v13); *v17 = 0LL; return 0LL;yuyan } if (((Byte) v8 yuyan *v17 = 3 * yuyan return realyuyan } v10 = (Byte) v8yuyan *((Byte *) v13 + 3 * i + 1) = 16 * v11 + (((v8 - v15) \u0026amp; 0x3C) \u0026gt;\u0026gt; 2); v9 = strchr(v15, *(char *) (v16 + 4 * i + 3)); if (!v9) { free(v13); *v17 = 0LL; return 0LL; } if (((Byte) v9 - (Byte) v15) == 64) { *v17 = 3 * i + 2; return realloc(v13, *v17); } *((Byte *) v13 + 3 * i + 2) = (v10 \u0026lt;\u0026lt; 6) + (Byte) v9 - (Byte) v15; } return v13;yuyan } 执行结果：\n","subcategory":null,"summary":"","tags":["java"],"title":"java-AES加密后再Base64混淆","url":"https://www.arloor.com/posts/other/java-aes128-then-base64/"},{"category":null,"content":" import static java.nio.charset.StandardCharsets.UTF_8;\npublic class AES128 {\npublic static final Charset CHARSET=UTF_8;\r/**\r* 加密\r* @param source\r* @param keyStr 原始秘钥字符串，注意不是最终的秘钥\r* @return 加密后的字节数组\r* @throws KeyLengthException 如果秘钥长度不为16则抛出\r*/\rstatic byte[] encrypt(byte[] source, String keyStr) throws KeyLengthException {\rbyte[] key=getKey(keyStr);\rif(key.length!=16){\rthrow new KeyLengthException();\r}\rtry {\rCipher cipher = Cipher.getInstance(\u0026amp;#34;AES/ECB/PKCS5Padding\u0026amp;#34;);\rSecretKeySpec keySpec=new SecretKeySpec(key, \u0026amp;#34;AES\u0026amp;#34;);\rcipher.init(Cipher.ENCRYPT_MODE,keySpec );\rreturn cipher.doFinal(source);\r} catch (Exception e) {\re.printStackTrace();\rreturn null;\r}\r}\r/**\r* 解密\r* @param encoded\r* @param keyStr 原始秘钥字符串，注意不是最终的秘钥\r* @return 解密后的字节数组\r* @throws KeyLengthException 如果秘钥长度不为16则抛出\r*/\rstatic byte[] decrypt(byte[] encoded, String keyStr) throws KeyLengthException {\rbyte[] key=getKey(keyStr);\rif(key.length!=16){\rthrow new KeyLengthException();\r}\rtry {\rCipher cipher = Cipher.getInstance(\u0026amp;#34;AES/ECB/PKCS5Padding\u0026amp;#34;);\rcipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \u0026amp;#34;AES\u0026amp;#34;));\rreturn cipher.doFinal(encoded);\r} catch (Exception e) {\re.printStackTrace();\rreturn null;\r}\r}\r/**\r* 由keyStr经过SHA256再取128bit作为秘钥\r* 这里SHA-256也可以换成SHA-1\r* @param keyStr\r* @return\r*/\rstatic byte[] getKey(String keyStr){\rbyte[] raw=keyStr.getBytes(CHARSET);\rMessageDigest sha = null;\rtry {\rsha = MessageDigest.getInstance(\u0026amp;#34;SHA-256\u0026amp;#34;);\r} catch (NoSuchAlgorithmException e) {\re.printStackTrace();\r}\rbyte[] key = sha.digest(raw);\rkey = Arrays.copyOf(key, 16); // use only first 128 bit\rreturn key;\r}\r/**\r* 返回byte数组的16进制字符串\r* @param array\r* @return\r*/\rstatic String byte2Hex(byte[] array){\rStringBuffer strHexString = new StringBuffer();\rfor (int i = 0; i \u0026amp;lt; array.length; i++)\r{\rString hex = Integer.toHexString(0xff \u0026amp;amp; array[i]);\rif (hex.length() == 1)\r{\rstrHexString.append(\u0026amp;#39;0\u0026amp;#39;);\r}\rstrHexString.append(hex);\r}\rreturn strHexString.toString();\r}\rpublic static class KeyLengthException extends Exception{\r}\r} 约定和注意点\npublic class Main { public static void main(String[] args) {\n//用于生成秘钥的字符串\rString keyStr=\u0026amp;#34;s\u0026amp;#34;;\rbyte[] source=\u0026amp;#34;刘港欢\u0026amp;#34;.getBytes(UTF_8);\rtry {\rbyte[] encode=AES128.encrypt(source,keyStr);\rSystem.out.println(AES128.byte2Hex(encode));\rbyte[] decode=AES128.decrypt(encode,keyStr);\rSystem.out.println(AES128.byte2Hex(decode));\rSystem.out.println(new String(decode,UTF_8));\r} catch (AES128.KeyLengthException e) {\re.printStackTrace();\r}\r}\r}\n################## 663ee437b462418c0940373d4a793cf4 e58898e6b8afe6aca2 刘港欢 记住一定要显式使用UTF-8！！！\n","subcategory":null,"summary":"","tags":["java"],"title":"java-AES128加密-代码与一些约定","url":"https://www.arloor.com/posts/other/java-aes128/"},{"category":null,"content":" #写入以下内容 { \u0026quot;registry-mirrors\u0026quot;: [\u0026quot;https://registry.docker-cn.com\u0026quot;] }\n最后 Flush changes: sudo systemctl daemon-reload #Restart Docker: sudo systemctl restart docker 配置不需要sudo\n#下面就可以看到proxyserver运行的日志了 2019-01-01 15:09:17.312 [main] INFO com.arloor.proxyserver.ServerProxyBootStrap - 开启代理 端口:8080 进入容器一探究竟\n. ~/.bashrc #关键：导入PATH pm2 start process.json \u0026ndash;env local tail -f /dev/null # 关键：让此bash进程永远不退出 第一个坑：最好手动导入PATH\n","subcategory":null,"summary":"","tags":["program"],"title":"docker使用笔记","url":"https://www.arloor.com/posts/docker/docker-first-use/"},{"category":null,"content":" #开启代理 cd /home/x1/bin/proxy (./proxy \u0026amp;\u0026gt;\u0026gt; proxy.log \u0026amp;) lsof -i:8081||echo 安装shadowsocks-libev并且开机启动ss-local\n[Service] Type=simple CapabilityBoundingSet=CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_BIND_SERVICE EnvironmentFile=/etc/default/shadowsocks-libev User=nobody Group=nogroup LimitNOFILE=32768 ExecStart=/usr/bin/ss-local -c /etc/shadowsocks-libev/config.json Restart=always RestartSec=5\n[Install] WantedBy=multi-user.target EOF systemctl enable ss service ss start 这样就可以使用service ss xxxxx来管理shadowsocks了。其中比较重要的项是：\n\u0026amp;lt;mirrors\u0026amp;gt;\r\u0026amp;lt;mirror\u0026amp;gt;\r\u0026amp;lt;id\u0026amp;gt;aliyunmaven\u0026amp;lt;/id\u0026amp;gt;\r\u0026amp;lt;mirrorOf\u0026amp;gt;*\u0026amp;lt;/mirrorOf\u0026amp;gt;\r\u0026amp;lt;name\u0026amp;gt;阿里云公共仓库\u0026amp;lt;/name\u0026amp;gt;\r\u0026amp;lt;url\u0026amp;gt;https://maven.aliyun.com/repository/public\u0026amp;lt;/url\u0026amp;gt;\r\u0026amp;lt;/mirror\u0026amp;gt;\r\u0026amp;lt;/mirrors\u0026amp;gt;\r\u0026amp;lt;proxies\u0026amp;gt; \u0026amp;lt;proxy\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;optional\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;active\u0026amp;gt;true\u0026amp;lt;/active\u0026amp;gt; \u0026amp;lt;protocol\u0026amp;gt;http\u0026amp;lt;/protocol\u0026amp;gt; \u0026amp;lt;username\u0026amp;gt;proxyuser\u0026amp;lt;/username\u0026amp;gt; \u0026amp;lt;password\u0026amp;gt;proxypass\u0026amp;lt;/password\u0026amp;gt; \u0026amp;lt;host\u0026amp;gt;localhost\u0026amp;lt;/host\u0026amp;gt; \u0026amp;lt;port\u0026amp;gt;3128\u0026amp;lt;/port\u0026amp;gt; \u0026amp;lt;nonProxyHosts\u0026amp;gt;maven.aliyun.com|some.host.com\u0026amp;lt;/nonProxyHosts\u0026amp;gt; \u0026amp;lt;/proxy\u0026amp;gt; \u0026amp;lt;/proxies\u0026amp;gt;\r\u0026lt;/settings\u0026gt; git pull/push每次都要输入密码\n#! /bin/bash\n设置http代理，使用方法： 在terminal中输入 \u0026quot;. pass\u0026quot; （前提是将此路径加入path） 效果：该terminal将使用如下的代理 export http_proxy=http://127.0.0.1:3128 export https_proxy=http://127.0.0.1:3128 git config \u0026ndash;global http.proxy 'http://127.0.0.1:3128' git config \u0026ndash;global https.proxy 'http://127.0.0.1:3128'\n#git config \u0026ndash;global \u0026ndash;unset http.proxy #git config \u0026ndash;global \u0026ndash;unset https.proxy 这样就可以方便地用上我写的代理啦。最好的大概就是安装go、node包、apt安装docker时超级方便。\ngit pull git add . git commit -m \u0026quot;自动提交 @$(date)\u0026quot; git push\nyum install httpd systemctl enable httpd cd $dir echo \u0026quot;生成静态资源\u0026hellip;\u0026quot; hugo\necho \u0026quot;上传新的静态资源\u0026hellip;.\u0026quot; cd public/ tar -zcf public.tar.gz \u0026ndash;exclude=public.tar.gz * if [ \u0026quot;$?\u0026quot; != \u0026quot;0\u0026quot; ]; then echo -e \u0026quot;\\n 压缩失败，退出\u0026quot; rm -rf ../public #删除生成的静态资源 exit 1 fi\nscp -r -P $port ./public.tar.gz root@$host:~ if [ \u0026quot;$?\u0026quot; != \u0026quot;0\u0026quot; ]; then echo -e \u0026quot;\\n 上传静态资源失败，退出\u0026quot; rm -rf ../public #删除生成的静态资源 exit 1 fi\nssh root@$host -p$port \u0026quot; echo \u0026quot;删除服务器的旧版本静态资源\u0026hellip;.\u0026quot; rm -rf /var/www/html/* tar -zxf public.tar.gz -C /var/www/html/ rm -f public.tar.gz echo \u0026quot;reload httpd\u0026hellip;.\u0026quot; systemctl reload httpd \u0026quot; echo \u0026quot;部署完毕，请访问 http://\u0026quot;$host cd $dir rm -rf public #删除生成的静态资源 其实也就是在centos7服务器上安装了apache(httpd)，然后hugo生成public文件下的静态资源，将这些静态资源复制到服务器/var/www/html中。为了舒服地（不需要输ssh密码）使用该脚本，请使用ssh秘钥登录centos7服务器。\nGRUB_THEME=\u0026quot;/boot/grub/themes/主题包文件夹名称/theme.txt\u0026quot; GRUB_THEME=\u0026quot;/boot/grub/themes/Cyber-Security/theme.txt\u0026quot;\n最后：更新grub配置 sudo update-grub 设置登录页面(GDM)的背景\n#安装gufw图形化防火墙配置工具 sudo apt install gufw 打开防火墙配置（gufw），要是不知道如何配置，搜一下吧～\n","subcategory":null,"summary":"","tags":["linux"],"title":"把ubuntu18.04 变成我的ubuntu","url":"https://www.arloor.com/posts/linux/turn-ubuntu-mine-own/"},{"category":null,"content":" #! /bin/bash\n设置http代理，使用方法： 在terminal中输入 \u0026quot;. pass\u0026quot; （前提是将此路径加入path） 效果：该terminal将使用如下的代理 export http_proxy=http://127.0.0.1:8081 export https_proxy=http://127.0.0.1:8081 以后，输入. pass，当前终端就可以使用这个代理了。原因：source/. 是在当前shell执行的，不会新建bash\n","subcategory":null,"summary":"","tags":["Program"],"title":"HttpProxy-基于netty的代理","url":"https://www.arloor.com/posts/netty/proxynew-break-the-wall-by-netty/"},{"category":null,"content":" [Desktop Action Store] Name=Store Name[zh_CN]=商店 Exec=steam steam://store\n[Desktop Action Community] Name=Community Name[zh_CN]=社区 Exec=steam steam://url/SteamIDControlPage\n[Desktop Action Library] Name=Library Name[zh_CN]=库 Exec=steam steam://open/games\n[Desktop Action Servers] Name=Servers Name[zh_CN]=服务器 Exec=steam steam://open/servers\n[Desktop Action Screenshots] Name=Screenshots Name[zh_CN]=截图 Exec=steam steam://open/screenshots\n[Desktop Action News] Name=News Name[zh_CN]=新闻 Exec=steam steam://open/news\n[Desktop Action Settings] Name=Settings Name[zh_CN]=设置 Exec=steam steam://open/settings\n[Desktop Action BigPicture] Name=Big Picture Exec=steam steam://open/bigpicture\n[Desktop Action Friends] Name=Friends Name[zh_CN]=好友 Exec=steam steam://open/friends ","subcategory":null,"summary":"","tags":["linux"],"title":"添加Ubuntu桌面图标","url":"https://www.arloor.com/posts/linux/ubuntu-desktop-entry-example/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["linux"],"title":"Shell关闭占用某端口的应用","url":"https://www.arloor.com/posts/linux/shell-close-process-that-hold-some-port/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["netty"],"title":"Netty直接内存溢出问题解决","url":"https://www.arloor.com/posts/netty/netty-direct-memory-leak/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["Program"],"title":"Proxyme-基于javaNIO的http代理","url":"https://www.arloor.com/posts/netty/proxyme-based-on-javanio/"},{"category":null,"content":" public static void main(String[] args) {\rSpringApplication.run(ServiceZuulApplication.class, args);\r}\r} application.yml\npublic static void main(String[] args) {\rSpringApplication.run(ConfigServerApplication.class, args);\r}\r} application.properties\npublic static void main(String[] args) {\rSpringApplication.run(ConfigClientApplication.class, args);\r}\r@Value(\u0026amp;#34;${foo}\u0026amp;#34;)\rString foo;\r@RequestMapping(value = \u0026amp;#34;/hi\u0026amp;#34;)\rpublic String hi(){\rreturn foo;\r}\r} bootstrap.properties\n将配置中心纳入服务注册中心管理，以实现高可用 eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/ spring.cloud.config.discovery.enabled=true spring.cloud.config.discovery.serviceId=config-server 这样改造之后，就通过服务注册中心的方式使用了config-server。也就允许了冗余。\n","subcategory":null,"summary":"","tags":["program"],"title":"spring cloud学习（二）","url":"https://www.arloor.com/posts/microservice/spring_cloud-study-two/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":null,"title":"DERA","url":"https://www.arloor.com/portfolio/dera/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":["program"],"title":"微服务架构是什么","url":"https://www.arloor.com/posts/microservice/what-is-microservice/"},{"category":null,"content":" \u0026amp;lt;groupId\u0026amp;gt;com.arloor\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;faxian\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;1.0-SNAPSHOT\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;parent\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;1.5.2.RELEASE\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;!-- lookup parent from repository --\u0026amp;gt;\r\u0026amp;lt;/parent\u0026amp;gt;\r\u0026amp;lt;properties\u0026amp;gt;\r\u0026amp;lt;project.build.sourceEncoding\u0026amp;gt;UTF-8\u0026amp;lt;/project.build.sourceEncoding\u0026amp;gt;\r\u0026amp;lt;project.reporting.outputEncoding\u0026amp;gt;UTF-8\u0026amp;lt;/project.reporting.outputEncoding\u0026amp;gt;\r\u0026amp;lt;java.version\u0026amp;gt;1.8\u0026amp;lt;/java.version\u0026amp;gt;\r\u0026amp;lt;/properties\u0026amp;gt;\r\u0026amp;lt;dependencies\u0026amp;gt;\r\u0026amp;lt;!--eureka server --\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-starter-eureka-server\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;!-- spring boot test--\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-test\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;scope\u0026amp;gt;test\u0026amp;lt;/scope\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;com.sun.jersey\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;jersey-bundle\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;1.19\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;/dependencies\u0026amp;gt;\r\u0026amp;lt;dependencyManagement\u0026amp;gt;\r\u0026amp;lt;dependencies\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-dependencies\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;Dalston.RC1\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;type\u0026amp;gt;pom\u0026amp;lt;/type\u0026amp;gt;\r\u0026amp;lt;scope\u0026amp;gt;import\u0026amp;lt;/scope\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;/dependencies\u0026amp;gt;\r\u0026amp;lt;/dependencyManagement\u0026amp;gt;\r\u0026amp;lt;build\u0026amp;gt;\r\u0026amp;lt;plugins\u0026amp;gt;\r\u0026amp;lt;plugin\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;/plugin\u0026amp;gt;\r\u0026amp;lt;/plugins\u0026amp;gt;\r\u0026amp;lt;/build\u0026amp;gt;\r\u0026amp;lt;repositories\u0026amp;gt;\r\u0026amp;lt;repository\u0026amp;gt;\r\u0026amp;lt;id\u0026amp;gt;spring-milestones\u0026amp;lt;/id\u0026amp;gt;\r\u0026amp;lt;name\u0026amp;gt;Spring Milestones\u0026amp;lt;/name\u0026amp;gt;\r\u0026amp;lt;url\u0026amp;gt;https://repo.spring.io/milestone\u0026amp;lt;/url\u0026amp;gt;\r\u0026amp;lt;snapshots\u0026amp;gt;\r\u0026amp;lt;enabled\u0026amp;gt;false\u0026amp;lt;/enabled\u0026amp;gt;\r\u0026amp;lt;/snapshots\u0026amp;gt;\r\u0026amp;lt;/repository\u0026amp;gt;\r\u0026amp;lt;/repositories\u0026amp;gt;\r\u0026lt;/project\u0026gt; 注意：在原博客中dependency中没有\npublic static void main(String[] args) {\rSpringApplication.run(EurekaserverApplication.class, args);\r}\r} application.properties\neureka.client.fetchRegistry=false 表明自己是一个eureka server。有一个因为这两个配置没有生效导致的问题如下：\n\u0026amp;lt;groupId\u0026amp;gt;com.arloor\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;service-hi\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;1.0-SNAPSHOT\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;parent\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;1.5.2.RELEASE\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;!-- lookup parent from repository --\u0026amp;gt;\r\u0026amp;lt;/parent\u0026amp;gt;\r\u0026amp;lt;properties\u0026amp;gt;\r\u0026amp;lt;project.build.sourceEncoding\u0026amp;gt;UTF-8\u0026amp;lt;/project.build.sourceEncoding\u0026amp;gt;\r\u0026amp;lt;project.reporting.outputEncoding\u0026amp;gt;UTF-8\u0026amp;lt;/project.reporting.outputEncoding\u0026amp;gt;\r\u0026amp;lt;java.version\u0026amp;gt;1.8\u0026amp;lt;/java.version\u0026amp;gt;\r\u0026amp;lt;/properties\u0026amp;gt;\r\u0026amp;lt;dependencies\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-starter-eureka\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-web\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-test\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;scope\u0026amp;gt;test\u0026amp;lt;/scope\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;/dependencies\u0026amp;gt;\r\u0026amp;lt;dependencyManagement\u0026amp;gt;\r\u0026amp;lt;dependencies\u0026amp;gt;\r\u0026amp;lt;dependency\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-dependencies\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;version\u0026amp;gt;Dalston.RC1\u0026amp;lt;/version\u0026amp;gt;\r\u0026amp;lt;type\u0026amp;gt;pom\u0026amp;lt;/type\u0026amp;gt;\r\u0026amp;lt;scope\u0026amp;gt;import\u0026amp;lt;/scope\u0026amp;gt;\r\u0026amp;lt;/dependency\u0026amp;gt;\r\u0026amp;lt;/dependencies\u0026amp;gt;\r\u0026amp;lt;/dependencyManagement\u0026amp;gt;\r\u0026amp;lt;build\u0026amp;gt;\r\u0026amp;lt;plugins\u0026amp;gt;\r\u0026amp;lt;plugin\u0026amp;gt;\r\u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt;\r\u0026amp;lt;artifactId\u0026amp;gt;spring-boot-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt;\r\u0026amp;lt;/plugin\u0026amp;gt;\r\u0026amp;lt;/plugins\u0026amp;gt;\r\u0026amp;lt;/build\u0026amp;gt;\r\u0026amp;lt;repositories\u0026amp;gt;\r\u0026amp;lt;repository\u0026amp;gt;\r\u0026amp;lt;id\u0026amp;gt;spring-milestones\u0026amp;lt;/id\u0026amp;gt;\r\u0026amp;lt;name\u0026amp;gt;Spring Milestones\u0026amp;lt;/name\u0026amp;gt;\r\u0026amp;lt;url\u0026amp;gt;https://repo.spring.io/milestone\u0026amp;lt;/url\u0026amp;gt;\r\u0026amp;lt;snapshots\u0026amp;gt;\r\u0026amp;lt;enabled\u0026amp;gt;false\u0026amp;lt;/enabled\u0026amp;gt;\r\u0026amp;lt;/snapshots\u0026amp;gt;\r\u0026amp;lt;/repository\u0026amp;gt;\r\u0026amp;lt;/repositories\u0026amp;gt;\r\u0026lt;/project\u0026gt; application.yml\nspring: profiles: peer0 eureka: instance: hostname: peer0 client: serviceUrl: defaultZone: http://peer1:8761/eureka/ 然后，定义application-peer1.yml\npublic static void main(String[] args) {\rSpringApplication.run(ServiceRibbonApplication.class, args);\r}\r@Bean\r@LoadBalanced\rRestTemplate restTemplate() {\rreturn new RestTemplate();\r}\r}\n//调用service-hi服务的bean @Service public class HelloService {\n@Autowired\rRestTemplate restTemplate;\rpublic String hiService(String name) {\rreturn restTemplate.getForObject(\u0026amp;#34;http://SERVICE-HI/hi?name=\u0026amp;#34;+name,String.class);\r}\r}\n//restController @RestController public class HelloControler {\n@Autowired\rHelloService helloService;\r@RequestMapping(value = \u0026amp;#34;/hi\u0026amp;#34;)\rpublic String hi(@RequestParam String name){\rreturn helloService.hiService(name);\r}\r} 可以看到在主类中定义了一个restTemplate的bean，并且加了@LoadBalanced注解，顾名思义就是这个bean会做负载均衡了。\npublic static void main(String[] args) {\rSpringApplication.run(ServiceFeignApplication.class, args);\r}\r} feign接口：指明了使用service-hi服务。注意还加了@RequestMapping注解\n1.先在8761跑0-eureka-server 2.在8762跑一个1-service-hi 3.在8763跑一个1-service-hi。idea如何跑多个实例这样就注册了两个service-hi的实例。 4.在8765跑service-feign 5.在浏览器输入http://localhost:8765/hi?name=moontell\npublic static void main(String[] args) {\rSpringApplication.run(ServiceRibbonApplication.class, args);\r}\r@Bean\r@LoadBalanced\rRestTemplate restTemplate() {\rreturn new RestTemplate();\r}\r} 在service中增加 @HystrixCommand(fallbackMethod = “hiError”)//定义断路器的fallback方法，并定义hiError方法\n","subcategory":null,"summary":"","tags":["program"],"title":"spring cloud学习（一）","url":"https://www.arloor.com/posts/microservice/spring_cloud-study-one/"},{"category":null,"content":" @Test\rpublic void set() throws InterruptedException {\rValueOperations value=redisTemplate.opsForValue();\rvalue.set(\u0026amp;#34;名字\u0026amp;#34;,\u0026amp;#34;刘港欢\u0026amp;#34;);\rfor (int i = 0; i \u0026amp;lt;20 ; i++) {\rSystem.out.println(value.get(\u0026amp;#34;test\u0026amp;#34;));\rThread.sleep(1000);\r}\r}\r} 测试结果表明能正常运行，而且中文也没有问题。\n","subcategory":null,"summary":"","tags":["java"],"title":"redis与springboot整合学习","url":"https://www.arloor.com/posts/springboot/redis%E4%B8%8Espringboot%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0/"},{"category":null,"content":" // 在窗口中显示游戏原画 imshow(\u0026amp;#34;photo\u0026amp;#34;, dst); // 等待10000 ms后窗口自动关闭 waitKey(10000); return 0; } 应该能正常运行啦!\nLUT(img,lut,img) 可以知道，一个像素点的取值为0-255。其中p[i] = 255-i; 下标i表示旧的像素值，255-i表示新的像素值。也就是原图中像素值为i的改变为255-i。这样的效果就是图片取反。类似的还可以做减少图片的色彩类型的功能，比如原来值在0-9变为0，10-19变为1….那么lut[256]={0,0…..0,1,1….,2…..,2…}就行\nimwrite(filename, img);//将图片写进文件，文件的格式取决于后缀。 获取某点的像素值：\n//for循环中 vw.write(frame); //将视频帧写入文件 在一个博客中看到这样一段话：\n","subcategory":null,"summary":"","tags":["program"],"title":"opencv c++学习","url":"https://www.arloor.com/posts/other/opencv-study/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":null,"title":"hyde-hyde","url":"https://www.arloor.com/portfolio/hyde-hyde/"},{"category":null,"content":" ","subcategory":null,"summary":"","tags":null,"title":"LaraMod","url":"https://www.arloor.com/portfolio/laramod/"},{"category":null,"content":"","subcategory":null,"summary":"","tags":null,"title":"归档","url":"https://www.arloor.com/archives/"}]